{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Load and preprocess the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from pathlib import Path\n",
    "\n",
    "train_path = \"C:\\\\Users\\\\Addmin\\\\Desktop\\\\pets emotion detection\\\\Master Folder\\\\train\"\n",
    "test_path = \"C:\\\\Users\\\\Addmin\\\\Desktop\\\\pets emotion detection\\\\Master Folder\\\\test\"\n",
    "valid_path = \"C:\\\\Users\\\\Addmin\\\\Desktop\\\\pets emotion detection\\\\Master Folder\\\\valid\"\n",
    "\n",
    "# Function to load data from a directory\n",
    "def load_data(data_path):\n",
    "    data = []\n",
    "    for folder in os.listdir(data_path):\n",
    "        folder_path = os.path.join(data_path, folder)\n",
    "        if os.path.isdir(folder_path):\n",
    "            for file in os.listdir(folder_path):\n",
    "                file_path = os.path.join(folder_path, file)\n",
    "                data.append((file, folder, file_path))\n",
    "    return data\n",
    "\n",
    "train_data = load_data(train_path)\n",
    "test_data = load_data(test_path)\n",
    "valid_data = load_data(valid_path)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Build and train the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "import cv2\n",
    "import os\n",
    "\n",
    "# Define image dimensions\n",
    "img_height, img_width = 128, 128\n",
    "\n",
    "# Function to preprocess images using OpenCV\n",
    "def preprocess_image(file_path):\n",
    "    image = cv2.imread(file_path)\n",
    "    image = cv2.resize(image, (img_width, img_height))\n",
    "    image = image / 255.0\n",
    "    return image\n",
    "\n",
    "# Preprocess all data and encode labels\n",
    "def preprocess_data(data_path):\n",
    "    images = []\n",
    "    labels = []\n",
    "    label_encoder = LabelEncoder()\n",
    "    \n",
    "    for folder in os.listdir(data_path):\n",
    "        folder_path = os.path.join(data_path, folder)\n",
    "        if os.path.isdir(folder_path):\n",
    "            label = folder  # Folder name is the label\n",
    "            for file in os.listdir(folder_path):\n",
    "                file_path = os.path.join(folder_path, file)\n",
    "                images.append(preprocess_image(file_path))\n",
    "                labels.append(label)\n",
    "    \n",
    "    # Encode labels\n",
    "    labels_encoded = label_encoder.fit_transform(labels)\n",
    "    return np.array(images), labels_encoded\n",
    "\n",
    "# Load and preprocess train, test, and validation data\n",
    "train_images, train_labels = preprocess_data(\"C:\\\\Users\\\\Addmin\\\\Desktop\\\\pets emotion detection\\\\Master Folder\\\\train\")\n",
    "test_images, test_labels = preprocess_data(\"C:\\\\Users\\\\Addmin\\\\Desktop\\\\pets emotion detection\\\\Master Folder\\\\test\")\n",
    "valid_images, valid_labels = preprocess_data(\"C:\\\\Users\\\\Addmin\\\\Desktop\\\\pets emotion detection\\\\Master Folder\\\\valid\")\n",
    "\n",
    "# Split data for training and validation\n",
    "train_images, val_images, train_labels, val_labels = train_test_split(train_images, train_labels, test_size=0.2, random_state=42)\n",
    "\n",
    "# Convert labels to TensorFlow format\n",
    "train_labels = tf.keras.utils.to_categorical(train_labels)\n",
    "val_labels = tf.keras.utils.to_categorical(val_labels)\n",
    "test_labels = tf.keras.utils.to_categorical(test_labels)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_1\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv2d_4 (Conv2D)           (None, 126, 126, 32)      896       \n",
      "                                                                 \n",
      " max_pooling2d_4 (MaxPooling  (None, 63, 63, 32)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " conv2d_5 (Conv2D)           (None, 61, 61, 64)        18496     \n",
      "                                                                 \n",
      " max_pooling2d_5 (MaxPooling  (None, 30, 30, 64)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " conv2d_6 (Conv2D)           (None, 28, 28, 128)       73856     \n",
      "                                                                 \n",
      " max_pooling2d_6 (MaxPooling  (None, 14, 14, 128)      0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " flatten_11 (Flatten)        (None, 25088)             0         \n",
      "                                                                 \n",
      " dense_22 (Dense)            (None, 128)               3211392   \n",
      "                                                                 \n",
      " dropout (Dropout)           (None, 128)               0         \n",
      "                                                                 \n",
      " dense_23 (Dense)            (None, 4)                 516       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 3,305,156\n",
      "Trainable params: 3,305,156\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "Train on 800 samples, validate on 200 samples\n",
      "Epoch 1/10\n",
      "800/800 [==============================] - ETA: 0s - loss: 1.4521 - accuracy: 0.2425"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Addmin\\AppData\\Roaming\\Python\\Python39\\site-packages\\keras\\engine\\training_v1.py:2335: UserWarning: `Model.state_updates` will be removed in a future version. This property should not be used in TensorFlow 2.0, as `updates` are applied automatically.\n",
      "  updates = self.state_updates\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "800/800 [==============================] - 145s 182ms/sample - loss: 1.4521 - accuracy: 0.2425 - val_loss: 1.3853 - val_accuracy: 0.2850\n",
      "Epoch 2/10\n",
      "800/800 [==============================] - 168s 210ms/sample - loss: 1.3820 - accuracy: 0.2862 - val_loss: 1.3812 - val_accuracy: 0.2150\n",
      "Epoch 3/10\n",
      "800/800 [==============================] - 185s 232ms/sample - loss: 1.3749 - accuracy: 0.3063 - val_loss: 1.3554 - val_accuracy: 0.4000\n",
      "Epoch 4/10\n",
      "800/800 [==============================] - 131s 164ms/sample - loss: 1.3339 - accuracy: 0.3638 - val_loss: 1.3433 - val_accuracy: 0.2800\n",
      "Epoch 5/10\n",
      "800/800 [==============================] - 117s 146ms/sample - loss: 1.2821 - accuracy: 0.3988 - val_loss: 1.3074 - val_accuracy: 0.3500\n",
      "Epoch 6/10\n",
      "800/800 [==============================] - 108s 135ms/sample - loss: 1.1201 - accuracy: 0.5175 - val_loss: 1.2879 - val_accuracy: 0.4100\n",
      "Epoch 7/10\n",
      "800/800 [==============================] - 107s 134ms/sample - loss: 1.0055 - accuracy: 0.5763 - val_loss: 1.3835 - val_accuracy: 0.3850\n",
      "Epoch 8/10\n",
      "800/800 [==============================] - 108s 135ms/sample - loss: 0.8308 - accuracy: 0.6750 - val_loss: 1.3893 - val_accuracy: 0.4450\n",
      "Epoch 9/10\n",
      "800/800 [==============================] - 108s 134ms/sample - loss: 0.6429 - accuracy: 0.7550 - val_loss: 1.4886 - val_accuracy: 0.4500\n",
      "Epoch 10/10\n",
      "800/800 [==============================] - 107s 134ms/sample - loss: 0.4951 - accuracy: 0.8150 - val_loss: 1.6513 - val_accuracy: 0.4600\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\n",
    "\n",
    "# Define the CNN model\n",
    "model = Sequential([\n",
    "    Conv2D(32, (3, 3), activation='relu', input_shape=(img_height, img_width, 3)),\n",
    "    MaxPooling2D((2, 2)),\n",
    "    Conv2D(64, (3, 3), activation='relu'),\n",
    "    MaxPooling2D((2, 2)),\n",
    "    Conv2D(128, (3, 3), activation='relu'),\n",
    "    MaxPooling2D((2, 2)),\n",
    "    Flatten(),\n",
    "    Dense(128, activation='relu'),\n",
    "    Dropout(0.5),\n",
    "    Dense(num_classes, activation='softmax')\n",
    "])\n",
    "\n",
    "# Compile the model\n",
    "model.compile(optimizer='adam',\n",
    "              loss='categorical_crossentropy',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(train_images, train_labels, epochs=10, batch_size=32, validation_data=(val_images, val_labels))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Loss: 3.3686202952736304\n",
      "Test Accuracy: 0.2368421107530594\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjcAAAHFCAYAAAAOmtghAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAACD7klEQVR4nO3dd3xN5x/A8c/N3sOKIJIQBLGS2HvvGlXUitVSu3RQtNpqdVDaKq3+xN61W1TsvcUotYkRQpBEIuve8/vjyK1IkJDkZHzfr9d99Z5zz/je5Db363m+z/PoFEVREEIIIYTIJUy0DkAIIYQQIiNJciOEEEKIXEWSGyGEEELkKpLcCCGEECJXkeRGCCGEELmKJDdCCCGEyFUkuRFCCCFEriLJjRBCCCFyFUluhBBCCJGrSHIjciSdTpemx44dO17rPhMmTECn073SuTt27MiQGLK73r174+Hh8dzX7969i4WFBV27dn3uMZGRkdjY2PDGG2+k+b5z585Fp9Nx9erVNMfyNJ1Ox4QJE9J8vyS3bt1iwoQJBAcHp3jtdT4vGSUhIYHChQuj0+n4448/NI1FCK2YaR2AEK9i//79yba//PJLtm/fzrZt25LtL1eu3Gvdp3///rRo0eKVzvX19WX//v2vHUNOV7BgQd544w3WrFnDgwcPcHZ2TnHM0qVLefz4Mf369Xute40fP57hw4e/1jVe5tatW3z++ed4eHhQuXLlZK+9zuclo/z555/cuXMHgNmzZ9OpUydN4xFCC5LciBypRo0aybYLFiyIiYlJiv3PiomJwcbGJs33KVasGMWKFXulGB0cHF4aT17Rr18/Vq5cyaJFixgyZEiK1wMDA3FxcaF169avdZ+SJUu+1vmv63U+Lxll9uzZWFhYUL9+fTZv3syNGzc0jyk1er2exMRELC0ttQ5F5ELSLSVyrQYNGuDj48OuXbuoVasWNjY29O3bF4Bly5bRrFkzXF1dsba2pmzZsowePZro6Ohk10itm8HDw4M2bdqwadMmfH19sba2xtvbm8DAwGTHpdYt1bt3b+zs7Lh48SKtWrXCzs4ONzc3Ro0aRVxcXLLzb9y4QadOnbC3t8fJyYnu3btz+PBhdDodc+fOfeF7v3v3LoMGDaJcuXLY2dlRqFAhGjVqxO7du5Mdd/XqVXQ6HZMnT+aHH37A09MTOzs7atasyYEDB1Jcd+7cuZQpUwZLS0vKli3L/PnzXxhHkubNm1OsWDHmzJmT4rWzZ89y8OBBevXqhZmZGUFBQbRr145ixYphZWWFl5cXAwYM4N69ey+9T2rdUpGRkbzzzjvkz58fOzs7WrRowfnz51Oce/HiRfr06UOpUqWwsbGhaNGitG3bllOnThmP2bFjB1WrVgWgT58+xu7PpO6t1D4vBoOB7777Dm9vbywtLSlUqBC9evXixo0byY5L+rwePnyYunXrYmNjQ4kSJfjmm28wGAwvfe+gtipt2rSJtm3b8uGHH2IwGJ77WVm8eDE1a9bEzs4OOzs7KleuzOzZs5Mds2nTJho3boyjoyM2NjaULVuWSZMmJYu5QYMGKa797O8h6XP23XffMXHiRDw9PbG0tGT79u3ExsYyatQoKleujKOjI/ny5aNmzZqsXbs2xXUNBgM///wzlStXxtraGicnJ2rUqMG6desANYnOly8fMTExKc5t1KgR5cuXT8NPUeQGktyIXC00NJQePXrQrVs3NmzYwKBBgwC4cOECrVq1Yvbs2WzatIkRI0awfPly2rZtm6brnjhxglGjRvH++++zdu1aKlasSL9+/di1a9dLz01ISOCNN96gcePGrF27lr59+zJ16lS+/fZb4zHR0dE0bNiQ7du38+2337J8+XJcXFzo0qVLmuK7f/8+AJ999hl//fUXc+bMoUSJEjRo0CDVGqBffvmFoKAgpk2bxqJFi4iOjqZVq1ZEREQYj5k7dy59+vShbNmyrFy5knHjxvHll1+m6ApMjYmJCb179+bYsWOcOHEi2WtJCU9S4nnp0iVq1qzJzJkz2bx5M59++ikHDx6kTp06JCQkpOn9J1EUhfbt27NgwQJGjRrF6tWrqVGjBi1btkxx7K1bt8ifPz/ffPMNmzZt4pdffsHMzIzq1atz7tw5QO1qTIp33Lhx7N+/n/3799O/f//nxvDee+/x8ccf07RpU9atW8eXX37Jpk2bqFWrVoqE7fbt23Tv3p0ePXqwbt06WrZsyZgxY1i4cGGa3u/cuXPR6/X07duXJk2a4O7uTmBgIIqiJDvu008/pXv37hQpUoS5c+eyevVqAgICuHbtmvGY2bNn06pVKwwGA7/++ivr169n2LBhKZKy9Pjpp5/Ytm0bkydPZuPGjXh7exMXF8f9+/f54IMPWLNmDUuWLKFOnTp07NgxRfLcu3dvhg8fTtWqVVm2bBlLly7ljTfeMNZdDR8+nAcPHrB48eJk5505c4bt27czePDgV45d5DCKELlAQECAYmtrm2xf/fr1FUDZunXrC881GAxKQkKCsnPnTgVQTpw4YXzts88+U57938Td3V2xsrJSrl27Ztz3+PFjJV++fMqAAQOM+7Zv364Ayvbt25PFCSjLly9Pds1WrVopZcqUMW7/8ssvCqBs3Lgx2XEDBgxQAGXOnDkvfE/PSkxMVBISEpTGjRsrHTp0MO6/cuWKAigVKlRQEhMTjfsPHTqkAMqSJUsURVEUvV6vFClSRPH19VUMBoPxuKtXryrm5uaKu7v7S2O4fPmyotPplGHDhhn3JSQkKIULF1Zq166d6jlJv5tr164pgLJ27Vrja3PmzFEA5cqVK8Z9AQEByWLZuHGjAig//vhjsut+9dVXCqB89tlnz403MTFRiY+PV0qVKqW8//77xv2HDx9+7u/g2c/L2bNnFUAZNGhQsuMOHjyoAMonn3xi3Jf0eT148GCyY8uVK6c0b978uXEmMRgMipeXl1K0aFHj7zIpnqf/H7h8+bJiamqqdO/e/bnXioqKUhwcHJQ6deok+30/q379+kr9+vVT7H/295D0OStZsqQSHx//wveR9Fnt16+fUqVKFeP+Xbt2KYAyduzYF55fv359pXLlysn2vffee4qDg4MSFRX1wnNF7iEtNyJXc3Z2plGjRin2X758mW7dulG4cGFMTU0xNzenfv36gNpN8jKVK1emePHixm0rKytKly6d7F++z6PT6VK0EFWsWDHZuTt37sTe3j5Fcerbb7/90usn+fXXX/H19cXKygozMzPMzc3ZunVrqu+vdevWmJqaJosHMMZ07tw5bt26Rbdu3ZJ1u7i7u1OrVq00xePp6UnDhg1ZtGgR8fHxAGzcuJHbt28bW20AwsLCGDhwIG5ubsa43d3dgbT9bp62fft2ALp3755sf7du3VIcm5iYyNdff025cuWwsLDAzMwMCwsLLly4kO77Pnv/3r17J9tfrVo1ypYty9atW5PtL1y4MNWqVUu279nPxvPs3LmTixcvEhAQYPxdJnWdPd1lGhQUhF6vf2Erxr59+4iMjGTQoEEZOvrrjTfewNzcPMX+FStWULt2bezs7Iy/89mzZyf7uW/cuBHgpa0vw4cPJzg4mL179wJqt+SCBQsICAjAzs4uw96LyN4kuRG5mqura4p9jx49om7duhw8eJCJEyeyY8cODh8+zKpVqwB4/PjxS6+bP3/+FPssLS3TdK6NjQ1WVlYpzo2NjTVuh4eH4+LikuLc1Pal5ocffuC9996jevXqrFy5kgMHDnD48GFatGiRaozPvp+kIs+kY8PDwwH1y/dZqe17nn79+hEeHm6skZgzZw52dnZ07twZUGsqmjVrxqpVq/joo4/YunUrhw4dMtb/pOXn+7Tw8HDMzMxSvL/UYh45ciTjx4+nffv2rF+/noMHD3L48GEqVaqU7vs+fX9I/XNYpEgR4+tJXudzlVQv06FDBx4+fMjDhw9xdHSkTp06rFy5kocPHwJqPRbwwiLjtBzzKlL7OaxatYrOnTtTtGhRFi5cyP79+zl8+DB9+/ZN9v/E3bt3MTU1fennrV27dnh4ePDLL78AaldddHS0dEnlMTJaSuRqqf2rc9u2bdy6dYsdO3YYW2sA4x//7CB//vwcOnQoxf7bt2+n6fyFCxfSoEEDZs6cmWx/VFTUK8fzvPunNSaAjh074uzsTGBgIPXr1+fPP/+kV69exn9Rnz59mhMnTjB37lwCAgKM5128ePGV405MTCQ8PDxZ4pBazAsXLqRXr158/fXXyfbfu3cPJyenV74/qLVfzyYKt27dokCBAq903WdFRESwcuVKAGPB87MWL17MoEGDKFiwIKAWrLu5uaV67NPHvIiVlVWyuqwkzyv+Tu3/x4ULF+Lp6cmyZcuSvf5sgX3BggXR6/Xcvn071SQpiYmJCYMHD+aTTz5hypQpzJgxg8aNG1OmTJkXvheRu0jLjchzkv6APjsE9bffftMinFTVr1+fqKgoY1N8kqVLl6bpfJ1Ol+L9nTx5MsX8QGlVpkwZXF1dWbJkSbLi1GvXrrFv3740X8fKyopu3bqxefNmvv32WxISEpJ1SWX076Zhw4YALFq0KNn+ZwtOk+797H3/+usvbt68mWzfs61aL5LUJfpsQfDhw4c5e/YsjRs3fuk10mLx4sU8fvzYON/Ts48CBQoYu6aaNWuGqalpisT3abVq1cLR0ZFff/01RTHy0zw8PDh//nyyRCQ8PDxdnwmdToeFhUWyxOb27dspRkslFYG/KO4k/fv3x8LCgu7du3Pu3LlUpx8QuZu03Ig8p1atWjg7OzNw4EA+++wzzM3NWbRoUYpRPFoKCAhg6tSp9OjRg4kTJ+Ll5cXGjRv5+++/AfVfpy/Spk0bvvzySz777DPq16/PuXPn+OKLL/D09CQxMTHd8ZiYmPDll1/Sv39/OnTowDvvvMPDhw+ZMGFCurqlQO2a+uWXX/jhhx/w9vZOVrPj7e1NyZIlGT16NIqikC9fPtavX09QUFC6Ywb1i7xevXp89NFHREdH4+/vz969e1mwYEGKY9u0acPcuXPx9vamYsWKHD16lO+//z5Fi0vJkiWxtrZm0aJFlC1bFjs7O4oUKUKRIkVSXLNMmTK8++67/Pzzz5iYmNCyZUuuXr3K+PHjcXNz4/3333+l9/Ws2bNn4+zszAcffJCiyxOgV69e/PDDD5w4cYJKlSrxySef8OWXX/L48WPefvttHB0dOXPmDPfu3ePzzz/Hzs6OKVOm0L9/f5o0acI777yDi4sLFy9e5MSJE0yfPh2Anj178ttvv9GjRw/eeecdwsPD+e6773BwcEhz7G3atGHVqlUMGjSITp06cf36db788ktcXV25cOGC8bi6devSs2dPJk6cyJ07d2jTpg2WlpYcP34cGxsbhg4dajzWycmJXr16MXPmTNzd3dM8ClLkIhoXNAuRIZ43Wqp8+fKpHr9v3z6lZs2aio2NjVKwYEGlf//+yrFjx1KMgnneaKnWrVunuOazI0eeN1rq2Tifd5+QkBClY8eOip2dnWJvb6+8+eabyoYNG1KMGkpNXFyc8sEHHyhFixZVrKysFF9fX2XNmjXPHcXy/fffp7gGqYwm+t///qeUKlVKsbCwUEqXLq0EBgamuGZaVKlSRQGU7777LsVrZ86cUZo2barY29srzs7OyltvvaWEhISkiCcto6UURVEePnyo9O3bV3FyclJsbGyUpk2bKv/++2+K6z148EDp16+fUqhQIcXGxkapU6eOsnv37lRHBC1ZskTx9vZWzM3Nk10ntd+jXq9Xvv32W6V06dKKubm5UqBAAaVHjx7K9evXkx33vM/ry36+J06cUABlxIgRzz0m6f0OHTrUuG/+/PlK1apVFSsrK8XOzk6pUqVKihFgGzZsUOrXr6/Y2toqNjY2Srly5ZRvv/022THz5s1TypYtq1hZWSnlypVTli1blq7PmaIoyjfffKN4eHgolpaWStmyZZXff//9uT/LqVOnKj4+PoqFhYXi6Oio1KxZU1m/fn2Ka+7YsUMBlG+++ea5PxeRe+kU5QVtjkKIbOXrr79m3LhxhISEZMtZZ4XILkaNGsXMmTO5fv16qoXaIneTbikhsqmkpn9vb28SEhLYtm0bP/30Ez169JDERojnOHDgAOfPn2fGjBkMGDBAEps8SlpuhMimAgMDmTp1KlevXiUuLo7ixYvTrVs3xo0bh4WFhdbhCZEt6XQ6bGxsaNWqlXGqAZH3SHIjhBBCiFxFhoILIYQQIleR5EYIIYQQuYokN0IIIYTIVfLcaCmDwcCtW7ewt7fP0AXhhBBCCJF5FEUhKiqKIkWKvHQi0zyX3Ny6deu566kIIYQQInu7fv36S6fDyHPJjb29PaD+cNIzRbgQQgghtBMZGYmbm5vxe/xF8lxyk9QV5eDgIMmNEEIIkcOkpaRECoqFEEIIkatIciOEEEKIXEWSGyGEEELkKnmu5iat9Ho9CQkJWochRIYzNzfH1NRU6zCEECLTSHLzDEVRuH37Ng8fPtQ6FCEyjZOTE4ULF5a5noQQuZIkN89ISmwKFSqEjY2N/PEXuYqiKMTExBAWFgaAq6urxhEJIUTGk+TmKXq93pjY5M+fX+twhMgU1tbWAISFhVGoUCHpohJC5DpSUPyUpBobGxsbjSMRInMlfcalrkwIkRtJcpMK6YoSuZ18xoUQuZkkN0IIIYTIVSS5Ec/VoEEDRowYkebjr169ik6nIzg4ONNiEkIIIV5GkptcQKfTvfDRu3fvV7ruqlWr+PLLL9N8vJubG6Ghofj4+LzS/V5Fs2bNMDU15cCBA1l2TyGEENmbjJbKBUJDQ43Ply1bxqeffsq5c+eM+5JGxyRJSEjA3Nz8pdfNly9fuuIwNTWlcOHC6TrndYSEhLB//36GDBnC7NmzqVGjRpbdOzVp/bkKIURudvVeNIkGA16FXr56d2aRlptcoHDhwsaHo6MjOp3OuB0bG4uTkxPLly+nQYMGWFlZsXDhQsLDw3n77bcpVqwYNjY2VKhQgSVLliS77rPdUh4eHnz99df07dsXe3t7ihcvzqxZs4yvP9sttWPHDnQ6HVu3bsXf3x8bGxtq1aqVLPECmDhxIoUKFcLe3p7+/fszevRoKleu/NL3PWfOHNq0acN7773HsmXLiI6OTvb6w4cPeffdd3FxccHKygofHx/+/PNP4+t79+6lfv362NjY4OzsTPPmzXnw4IHxvU6bNi3Z9SpXrsyECROM2zqdjl9//ZV27dpha2vLxIkT0ev19OvXD09PT6ytrSlTpgw//vhjitgDAwMpX748lpaWuLq6MmTIEAD69u1LmzZtkh2bmJhI4cKFCQwMfOnPRAghtGIwKMzde4UWP+5i2JJgEvQGzWKR5OYlFEUhJj5Rk4eiKBn2Pj7++GOGDRvG2bNnad68ObGxsfj5+fHnn39y+vRp3n33XXr27MnBgwdfeJ0pU6bg7+/P8ePHGTRoEO+99x7//vvvC88ZO3YsU6ZM4ciRI5iZmdG3b1/ja4sWLeKrr77i22+/5ejRoxQvXpyZM2e+9P0oisKcOXPo0aMH3t7elC5dmuXLlxtfNxgMtGzZkn379rFw4ULOnDnDN998Y5zTJTg4mMaNG1O+fHn279/Pnj17aNu2LXq9/qX3ftpnn31Gu3btOHXqFH379sVgMFCsWDGWL1/OmTNn+PTTT/nkk0+SxTZz5kwGDx7Mu+++y6lTp1i3bh1eXl4A9O/fn02bNiVrjduwYQOPHj2ic+fO6YpNCCGySkh4DG//foAJ688Qm2DAycacqNhEzeKRbqmXeJygp9ynf2ty7zNfNMfGImN+RSNGjKBjx47J9n3wwQfG50OHDmXTpk2sWLGC6tWrP/c6rVq1YtCgQYCaME2dOpUdO3bg7e393HO++uor6tevD8Do0aNp3bo1sbGxWFlZ8fPPP9OvXz/69OkDwKeffsrmzZt59OjRC9/Pli1biImJoXnz5gD06NGD2bNnG6+zZcsWDh06xNmzZyldujQAJUqUMJ7/3Xff4e/vz4wZM4z7ypcv/8J7pqZbt27JkjWAzz//3Pjc09OTffv2sXz5cmNyMnHiREaNGsXw4cONx1WtWhWAWrVqUaZMGRYsWMBHH30EqC1Ub731FnZ2dumOTwghMpPBoLDo4DUmbfyXmHg9NhamjGnpTffq7piYaDflhLTc5BH+/v7JtvV6PV999RUVK1Ykf/782NnZsXnzZkJCQl54nYoVKxqfJ3V/JU3ln5Zzkqb7Tzrn3LlzVKtWLdnxz26nZvbs2XTp0gUzMzX5e/vttzl48KCxyys4OJhixYoZE5tnJbXcvK5nf64Av/76K/7+/hQsWBA7Ozt+//134881LCyMW7duvfDe/fv3Z86cOcbj//rrrxQJlBBCaO36/Rh6zD7I+LX/EBOvp7pnPjYNr0fPmh6aJjYgLTcvZW1uypkvmmt274xia2ubbHvKlClMnTqVadOmUaFCBWxtbRkxYgTx8fEvvM6zBbM6nQ6D4cX9qk+fkzR53NPnPDuh3Mu64+7fv8+aNWtISEhI1oWl1+sJDAzk22+/TVFE/ayXvW5iYpIijtRm833257p8+XLef/99pkyZQs2aNbG3t+f77783dve97L4AvXr1YvTo0ezfv5/9+/fj4eFB3bp1X3qeEEJkBUVRWHwohK//Okt0vB5rc1NGt/SmZw1tW2uepnnLzYwZM/D09MTKygo/Pz927979wuMXLVpEpUqVsLGxwdXVlT59+hAeHp5p8el0OmwszDR5ZOYssrt376Zdu3b06NGDSpUqUaJECS5cuJBp93ueMmXKcOjQoWT7jhw58sJzFi1aRLFixThx4gTBwcHGx7Rp05g3bx6JiYlUrFiRGzducP78+VSvUbFiRbZu3frcexQsWDBZ3UtkZCRXrlx56fvZvXs3tWrVYtCgQVSpUgUvLy8uXbpkfN3e3h4PD48X3jt//vy0b9+eOXPmMGfOHGNXmxBCaO3Ggxh6zj7E2NWniY7XU9XDmY3D6xJQS/vWmqdpmtwsW7aMESNGMHbsWI4fP07dunVp2bLlc7tG9uzZQ69evejXrx///PMPK1as4PDhw/Tv3z+LI8/5vLy8CAoKYt++fZw9e5YBAwZw+/btLI9j6NChzJ49m3nz5nHhwgUmTpzIyZMnX5jYzZ49m06dOuHj45Ps0bdvXx4+fMhff/1F/fr1qVevHm+++SZBQUFcuXKFjRs3smnTJgDGjBnD4cOHGTRoECdPnuTff/9l5syZ3Lt3D4BGjRqxYMECdu/ezenTpwkICEjTApNeXl4cOXKEv//+m/PnzzN+/HgOHz6c7JgJEyYwZcoUfvrpJy5cuMCxY8f4+eefkx3Tv39/5s2bx9mzZwkICEjvj1UIITKUoigsPRRCi2m72XPxHlbmJoxvU45l79bEo4Dtyy+QxTRNbn744Qf69etH//79KVu2LNOmTcPNze25o2UOHDiAh4cHw4YNw9PTkzp16jBgwICX/ktfpDR+/Hh8fX1p3rw5DRo0oHDhwrRv3z7L4+jevTtjxozhgw8+wNfXlytXrtC7d2+srKxSPf7o0aOcOHGCN998M8Vr9vb2NGvWjNmzZwOwcuVKqlatyttvv025cuX46KOPjKOhSpcuzebNmzlx4gTVqlWjZs2arF271ljDM2bMGOrVq0ebNm1o1aoV7du3p2TJki99PwMHDqRjx4506dKF6tWrEx4ebizAThIQEMC0adOYMWMG5cuXp02bNilazZo0aYKrqyvNmzenSJEiL/9BCiFEJgmNeEzAnMOMXnWKR3GJ+Lk7s2FYXfrV8cxWrTVP0ykZOd44HeLj47GxsWHFihV06NDBuH/48OEEBwezc+fOFOfs27ePhg0bsnr1alq2bElYWBidO3embNmy/Prrr6neJy4ujri4OON2ZGQkbm5uRERE4ODgkOzY2NhYrly5YuwmE9po2rQphQsXZsGCBVqHopmYmBiKFClCYGBgilFuGUE+60KIl1EUhRVHb/Dl+jNExSViYWbCh83K0LeOJ6YaJDWRkZE4Ojqm+v39LM0Kiu/du4der8fFxSXZfhcXl+d2j9SqVYtFixbRpUsXYmNjSUxM5I033kjRpP+0SZMmJRuaK7KXmJgYfv31V5o3b46pqSlLlixhy5YtBAUFaR2aJgwGA7dv32bKlCk4OjryxhtvaB2SECIPuh0Ry5hVJ9l+7i4Ald2cmPxWJbwK5YwpKTQvKE5tpMzz6i3OnDnDsGHD+PTTTzl69CibNm3iypUrDBw48LnXHzNmDBEREcbH9evXMzR+8Xp0Oh0bNmygbt26+Pn5sX79elauXEmTJk20Dk0TISEhFC1alOXLlxMYGGjsJhNCiKygKAorj96g2dSdbD93FwtTE0a39Gble7VyTGIDGrbcFChQAFNT0xStNGFhYSlac5JMmjSJ2rVr8+GHHwLqiBdbW1vq1q3LxIkTjXOoPM3S0hJLS8uMfwMiQ1hbW7Nlyxatw8g2PDw8MnRmaiGESKuwyFg+WX2KLWfVecgqFXNk8luVKOWi3RpRr0qzlhsLCwv8/PxSdD8EBQVRq1atVM+JiYnBxCR5yEkjWOQLQQghhEg/RVFYc/wmTafuYsvZMMxNdXzYvAwr36uVIxMb0HgSv5EjR9KzZ0/8/f2pWbMms2bNIiQkxNjNNGbMGG7evMn8+fMBaNu2Le+88w4zZ86kefPmhIaGMmLECKpVqyYjSoQQQoh0uhsVx9jVp9h85g4APkUdmPJWZcoUzplJTRJNk5suXboQHh7OF198QWhoKD4+PmzYsAF3d3cAQkNDk81507t3b6Kiopg+fTqjRo3CycmJRo0a8e2332r1FoQQQogcR1EU1p8M5bO1p3kQk4C5qY5hjUoxsEFJzE01L8d9bZoNBdfKi4aSyfBYkVfIZ12IvOveozjGrznNxtNqzWs5VwemdK5EWdcXD6/WWo4YCi6EEEKIrPXXyVDGrz3N/eh4zEx0DGnkxeCGXrmiteZpktwIIYQQudz96HjGrz3NXyfVNfO8C9sz+a1K+BR11DiyzJG7UjXxWho0aMCIESOM2x4eHkybNu2F5+h0OtasWfPa986o6wghhEhu0+lQmk3dyV8nQzE10TGskRfrhtTJtYkNSMtNrtC2bVseP36c6nwx+/fvp1atWhw9ehRfX990Xffw4cPY2mbsgmgTJkxgzZo1BAcHJ9sfGhqKs7Nzht7reR4/fkyRIkXQ6XTcvHkTa2vrLLmvEEJkpQfR8Xy27h/WnbgFQGkXO6a8VZkKxXJvUpNEWm5ygX79+rFt2zauXbuW4rXAwEAqV66c7sQGoGDBgtjY2GREiC9VuHDhLJtsceXKlfj4+FCuXDlWrVqVJfd8HkVRSExM1DQGIUTus/mf2zSduot1J25hooPBDUuyfmidPJHYgCQ3uUKbNm0oVKgQc+fOTbY/JiaGZcuW0a9fP8LDw3n77bcpVqwYNjY2VKhQgSVLlrzwus92S124cIF69ephZWVFuXLlUl3/6eOPP6Z06dLY2NhQokQJxo8fT0JCAgBz587l888/58SJE+h0OnQ6nTHmZ7ulTp06RaNGjbC2tiZ//vy8++67PHr0yPh67969ad++PZMnT8bV1ZX8+fMzePBg471eZPbs2fTo0YMePXoYVxB/2j///EPr1q1xcHDA3t6eunXrcunSJePrgYGBlC9fHktLS1xdXRkyZAgAV69eRafTJWuVevjwITqdjh07dgCwY8cOdDodf//9N/7+/lhaWrJ7924uXbpEu3btcHFxwc7OjqpVq6ZoiYuLi+Ojjz7Czc0NS0tLSpUqxezZs1EUBS8vLyZPnpzs+NOnT2NiYpIsdiFE7vYwJp73lwXz7oKj3HsUh1chO1YNqs2Hzb2xNDPVOrwsI91SL6MokBCjzb3NbeA562w9zczMjF69ejF37lw+/fRT49pcK1asID4+nu7duxMTE4Ofnx8ff/wxDg4O/PXXX/Ts2ZMSJUpQvXr1l97DYDDQsWNHChQowIEDB4iMjExWn5PE3t6euXPnUqRIEU6dOsU777yDvb09H330EV26dOH06dNs2rTJ+MXt6JjyXxExMTG0aNGCGjVqcPjwYcLCwujfvz9DhgxJlsBt374dV1dXtm/fzsWLF+nSpQuVK1fmnXfeee77uHTpEvv372fVqlUoisKIESO4fPkyJUqUAODmzZvUq1ePBg0asG3bNhwcHNi7d6+xdWXmzJmMHDmSb775hpYtWxIREcHevXtf+vN71kcffcTkyZMpUaIETk5O3Lhxg1atWjFx4kSsrKyYN28ebdu25dy5cxQvXhyAXr16sX//fn766ScqVarElStXuHfvHjqdjr59+zJnzhw++OAD4z0CAwOpW7cuJUuWTHd8QoicZ+vZO4xZdYqwqDhMdPBuvZKMaFIKK/O8k9QkkeTmZRJi4GuNZj/+5BZYpK3mpW/fvnz//ffs2LGDhg0bAuqXW8eOHXF2dsbZ2TnZF9/QoUPZtGkTK1asSFNys2XLFs6ePcvVq1cpVqwYAF9//TUtW7ZMdty4ceOMzz08PBg1ahTLli3jo48+wtraGjs7O8zMzChcuPBz77Vo0SIeP37M/PnzjTU/06dPp23btnz77bfGtcecnZ2ZPn06pqameHt707p1a7Zu3frC5CYwMJCWLVsa63tatGhBYGAgEydOBOCXX37B0dGRpUuXYm5uDkDp0qWN50+cOJFRo0YxfPhw476qVau+9Of3rC+++IKmTZsat/Pnz0+lSpWS3Wf16tWsW7eOIUOGcP78eZYvX05QUJBxUdGkhAygT58+fPrppxw6dIhq1aqRkJDAwoUL+f7779MdmxAiZ4l4nMAX68+w8tgNAEoUtGXyW5XwLZ41dYzZkXRL5RLe3t7UqlWLwMBAQG2h2L17N3379gVAr9fz1VdfUbFiRfLnz4+dnR2bN29ONgP0i5w9e5bixYsbExuAmjVrpjjujz/+oE6dOhQuXBg7OzvGjx+f5ns8fa9KlSolK2auXbs2BoOBc+fOGfeVL1/euLYYgKurK2FhYc+9rl6vZ968efTo0cO4r0ePHsybNw+9Xg9AcHAwdevWNSY2TwsLC+PWrVs0btw4Xe8nNf7+/sm2o6Oj+eijjyhXrhxOTk7Y2dnx77//Gn92wcHBmJqaUr9+/VSv5+rqSuvWrY2//z///JPY2Fjeeuut145VCJF9bT8XRrOpO1l57AY6HbxT15MNw+rm6cQGpOXm5cxt1BYUre6dDv369WPIkCH88ssvzJkzB3d3d+MX8ZQpU5g6dSrTpk2jQoUK2NraMmLECOLj49N07dQmstY902V24MABunbtyueff07z5s2NLSBTpkxJ1/tQFCXFtVO757MJiE6nw2AwPPe6f//9Nzdv3qRLly7J9uv1ejZv3kzLli1fOHLqZaOqkhZ1ffpn9bwaoGdHoX344Yf8/fffTJ48GS8vL6ytrenUqZPx95OWEV39+/enZ8+eTJ06lTlz5tClS5csKwgXQmStyNgEJv55huVH1NYazwK2fN+pIv4e+TSOLHuQ5OZldLo0dw1prXPnzgwfPpzFixczb9483nnnHWMysHv3btq1a2dstTAYDFy4cIGyZcum6drlypUjJCSEW7duGRcp3b9/f7Jj9u7di7u7O2PHjjXue3YEl4WFhbGV5EX3mjdvHtHR0cYkYO/evZiYmCTrIkqv2bNn07Vr12TxAXzzzTfMnj2bli1bUrFiRebNm0dCQkKK5Mne3h4PDw+2bt1q7Pp7WsGCBQF1WHuVKlUAUgx5f57du3fTu3dvOnToAMCjR4+4evWq8fUKFSpgMBjYuXOnsVvqWa1atcLW1paZM2eyceNGdu3alaZ7CyFyll3n7/LxypOERsSi00GfWp582LwM1hZ5r7bmeaRbKhexs7OjS5cufPLJJ9y6dYvevXsbX/Py8iIoKIh9+/Zx9uxZBgwYwO3bt9N87SZNmlCmTBl69erFiRMn2L17d4okwcvLi5CQEJYuXcqlS5f46aefWL16dbJjPDw8uHLlCsHBwdy7d4+4uLgU9+revTtWVlYEBARw+vRptm/fztChQ+nZs6ex3ia97t69y/r16wkICMDHxyfZIyAggHXr1nH37l2GDBlCZGQkXbt25ciRI1y4cIEFCxYYu8MmTJjAlClT+Omnn7hw4QLHjh3j559/BtTWlRo1avDNN99w5swZdu3alawG6UW8vLxYtWoVwcHBnDhxgm7duiVrhfLw8CAgIIC+ffuyZs0arly5wo4dO1i+fLnxGFNTU3r37s2YMWPw8vJKtdtQCJFzRcUmMGbVSXoFHiI0Ihb3/DYse7cmn7YtJ4nNMyS5yWX69evHgwcPaNKkiXGUDcD48ePx9fWlefPmNGjQgMKFC9O+ffs0X9fExITVq1cTFxdHtWrV6N+/P1999VWyY9q1a8f777/PkCFDqFy5Mvv27WP8+PHJjnnzzTdp0aIFDRs2pGDBgqkOR7exseHvv//m/v37VK1alU6dOtG4cWOmT5+evh/GU5KKk1Orl2nYsCH29vYsWLCA/Pnzs23bNh49ekT9+vXx8/Pj999/N7biBAQEMG3aNGbMmEH58uVp06YNFy5cMF4rMDCQhIQE/P39GT58uLFQ+WWmTp2Ks7MztWrVom3btjRv3jzF3EQzZ86kU6dODBo0CG9vb9555x2io6OTHdOvXz/i4+ONtVZCiNxhz4V7tJi2myWHrgPQu5YHG4fXpZqndEOlRlYFf4qslCxyur1799KgQQNu3LjxwlYu+awLkTM8iktk0oazLDqoDi5wy2fNd29WombJ/BpHlvVkVXAh8pi4uDiuX7/O+PHj6dy58yt33wkhso99l+7x0R8nufHgMQA9a7gzuqU3tpby1f0y8hMSIhdYsmQJ/fr1o3LlyixYsEDrcIQQryE6LpFvN/3L/P3qgIyiTtZ836kitbwKaBxZziHJjRC5QO/evZMVkAshcqaDl8P58I+ThNxXZ8bvVr04n7Qqi5201qSL/LSEEEIIjcUnGpi08Sxz9l4FoIijFd+8WZF6pQtqG1gOJclNKvJYjbXIg+QzLkT2ERWbwHsLj7Hn4j0AulZ145PWZXGwSjlTukgbSW6ekjTcNyYmJk0zwgqRU8XEqE3eqS0zIYTIOmGRsfSec5gzoZHYWJjyU9cqNCknAwJelyQ3TzE1NcXJycm4PpGNjc1zlwEQIidSFIWYmBjCwsJwcnJKtjaXECJrXbr7iIDAQ9x48JgCdhbM6V2NCsUctQ4rV5Dk5hlJq1W/aAFGIXI6JyenF67MLoTIXMdCHtBv7mEexCTgkd+GeX2r4Z4/Zyz1kxNIcvMMnU6Hq6srhQoVeu6ih0LkZObm5tJiI4SGtpy5w5Alx4hNMFCpmCOze1elgJ2l1mHlKpLcPIepqal8AQghhMhQSw+F8MnqUxgUaFCmIL9085VJ+TKB/ESFEEKITKYoCj9uvcC0LepadG/5FePrjhUwN5UlHjODJDdCCCFEJkrUGxi/9rRx0cshDb0Y1ay0DFjJRJLcCCGEEJnkcbyeoUuOseVsGDodfNHOh5413LUOK9eT5EYIIYTIBPej4+k37zDHQx5iaWbCj12r0MJHRilmBUluhBBCiAx2/X4MAXMOcfluNI7W5swO8MffI5/WYeUZktwIIYQQGeifWxH0nnOYu1FxFHG0Yl7fapRysdc6rDxFkhshhBAig+y9eI8BC47yKC4R78L2zO1TjcKOVlqHledIciOEEEJkgLXBN/lgxQkS9Ao1SuTjt57+OFrL+m1akORGCCGEeE2/77rMVxvOAtC6ois/dK6EpZlMBKsVSW6EEEKIV2QwKHy14Syz91wBoE9tD8a3LoeJicxhoyVJboQQQohXEJeo54MVJ1l/4hYAn7Ty5p26JWRyvmxAkhshhBAinSJjExgw/yj7L4djZqJj8luVaF+lqNZhiSckuRFCCCHS4U5kLAGBh/j3dhS2Fqb82tOPuqUKah2WeIokN0IIIUQaXQyLIiDwMDcfPqaAnSVz+1TFp6ij1mGJZ0hyI4QQQqTB0Wv36TfvCA9jEvAsYMv8vtVwy2ejdVgiFZLcCCGEEC+x+Z/bDF1ynLhEA5XdnAjsXZV8thZahyWeQ5IbIYQQ4gUWHbzG+DWnMSjQ2LsQP3ergo2FfH1mZ/LbEUIIIVKhKApTg87z07aLAHTxd+OrDj6YmZpoHJl4GUluhBBCiGck6g2MXX2aZUeuAzCscSneb1JK5rDJISS5EUIIIZ4SE5/IkMXH2fZvGCY6mNi+At2qF9c6LJEOktwIIYQQT4Q/iqPvvCOcuP4QSzMTpnfzpWk5F63DEumkecfhjBkz8PT0xMrKCj8/P3bv3v3cY3v37o1Op0vxKF++fBZGLIQQIje6fj+GTr/u58T1hzjZmLP4neqS2ORQmiY3y5YtY8SIEYwdO5bjx49Tt25dWrZsSUhISKrH//jjj4SGhhof169fJ1++fLz11ltZHLkQQojc5PTNCDrM2MeVe9EUdbLmj4G18HPPp3VY4hXpFEVRtLp59erV8fX1ZebMmcZ9ZcuWpX379kyaNOml569Zs4aOHTty5coV3N3d03TPyMhIHB0diYiIwMHB4ZVjF0IIkTvsvnCXgQuOEh2vp6yrA3P7VMXFwUrrsMQz0vP9rVnLTXx8PEePHqVZs2bJ9jdr1ox9+/al6RqzZ8+mSZMmL0xs4uLiiIyMTPYQQgghAFYfv0GfOYeJjtdTq2R+lg2oIYlNLqBZcnPv3j30ej0uLsn7M11cXLh9+/ZLzw8NDWXjxo3079//hcdNmjQJR0dH48PNze214hZCCJHzKYrCbzsv8f6yEyQaFNpWKsKcPlVxsDLXOjSRATQvKH52zgBFUdI0j8DcuXNxcnKiffv2LzxuzJgxREREGB/Xr19/nXCFEELkcAaDwhd/nmHSxn8B6F/Hkx+7VMbSzFTjyERG0WwoeIECBTA1NU3RShMWFpaiNedZiqIQGBhIz549sbB48doelpaWWFpavna8Qgghcr7YBD2jlp/gr1OhAIxrXZb+dUtoHJXIaJq13FhYWODn50dQUFCy/UFBQdSqVeuF5+7cuZOLFy/Sr1+/zAxRCCFELhLxOIGAwEP8dSoUc1MdP3atLIlNLqXpJH4jR46kZ8+e+Pv7U7NmTWbNmkVISAgDBw4E1C6lmzdvMn/+/GTnzZ49m+rVq+Pj46NF2EIIIXKY2xGx9J5ziH9vR2Fnacasnn7U8iqgdVgik2ia3HTp0oXw8HC++OILQkND8fHxYcOGDcbRT6GhoSnmvImIiGDlypX8+OOPWoQshBAih7lwJ4qAwEPcioilkL0lc/tUo1wRmQokN9N0nhstyDw3QgiRdxy+ep/+844Q8TiBEgVtmdenGm75bLQOS7yC9Hx/y9pSQgghcqVNp28zfOlx4hINVCnuRGBAVZxtXzwIReQOktwIIYTIdRYcuMZna09jUKBJWRd+frsK1hYy1DuvkORGCCFErqEoCpM3n+OX7ZcAeLtacb5sVx4zU82ndRNZSJIbIYQQuUKC3sAnq06x4ugNAN5vUpphjb3SNDGsyF0kuRFCCJHjRcclMnjxMXacu4upiY6v2vvQtVpxrcMSGpHkRgghRI5271Ecfece5uSNCKzMTfilmy+Ny754pnuRu0lyI4QQIse6+fAx3X8/wNXwGJxtzJnduyq+xZ21DktoTJIbIYQQOdL96Hh6zj7I1fAYijlbM69vNUoWtNM6LJENSHIjhBAix4mJT6Tv3MNcvhuNq6MVywfUpIiTtdZhiWxCxsYJIYTIURL0BgYtOkbw9Yc42ZizoF81SWxEMpLcCCGEyDEMBoWP/zjJjnN3sTI3YXZAVbwK2WsdlshmJLkRQgiRY3y76V9WHb+JqYmOGd198XOX4mGRkiQ3QgghcoTfd13mt12XAfj2zYo08pbh3iJ1ktwIIYTI9lYfv8FXG84CMLqlN538imkckcjOJLkRQgiRre04F8aHK04C0K+OJwPqldA4IpHdSXIjhBAi2zoe8oD3Fh4j0aDQrnIRxrYqK2tFiZeS5EYIIUS2dOnuI/rOPczjBD11SxXg+06VMDGRxEa8nCQ3Qgghsp3bEbH0mn2IBzEJVCzmyMwefliYyVeWSBv5pAghhMhWIh4nEBB4iJsPH+NZwJbA3lWxs5QJ9UXaSXIjhBAi24hN0PPOvCOcuxNFQXtL5vetRgE7S63DEjmMJDdCCCGyBb1BYdiS4xy6eh97SzPm9amGWz4brcMSOZAkN0IIITSnKArj1pxm85k7WJiZ8HuAP+WKOGgdlsihJLkRQgihualbLrDkUAg6HfzUtTI1SuTXOiSRg0lyI4QQQlML9l/lp60XAPiynQ8tfFw1jkjkdJLcCCGE0MyGU6F8uu4fAEY0KUWPGu4aRyRyA0luhBBCaGLfpXuMWBqMokD36sUZ3riU1iGJXEKSGyGEEFnu9M0I3p1/lHi9gRblC/NFOx9ZVkFkGEluhBBCZKmQ8Bh6zznMo7hEqnvmY1rXypjKsgoiA0lyI4QQIsvcjYqjZ+BB7j2Ko6yrA78H+GNlbqp1WCKXkeRGCCFElngUl0ifuYe4Fh5DMWdr5vWpioOVudZhiVxIkhshhBCZLi5Rz4AFRzh9M5J8thbM71uNQg5WWoclcilJboQQQmQqg0Fh1PIT7L0Yjo2FKXN6V6VEQTutwxK5mCQ3QgghMo2iKHzx5xn+PBmKmYmOX3v4UcnNSeuwRC4nyY0QQohMM3PnJebuuwrAlM6VqFe6oLYBiTxBkhshhBCZYvmR63y36RwA49uUo13lohpHJPIKSW6EEEJkuC1n7jBm1SkABtYvSb86nhpHJPISSW6EEEJkqKPX7jN48TH0BoU3fYvxcYsyWock8hhJboQQQmSY83ei6Dv3CHGJBhp5F+KbNyvIsgoiy0lyI4QQIkPceviYgMBDRDxOoEpxJ37p5ou5qXzNiKwnnzohhBCv7UF0PL0CDxEaEYtXITsCA6pibSHLKghtSHIjhBDitcTEJ9J33mEuhj3C1dGK+X2r4WxroXVYIg+T5EYIIcQrS9AbGLL4OMdDHuJobc68vtUo4mStdVgij5PkRgghxCtRFIXRK0+x7d8wrMxNCOztT2kXe63DEkKSGyGEEK/m203nWHnsBqYmOqa/7Yufez6tQxICkORGCCHEK/jf7sv8uvMSAJM6VqBJOReNIxLiP5onNzNmzMDT0xMrKyv8/PzYvXv3C4+Pi4tj7NixuLu7Y2lpScmSJQkMDMyiaIUQQqwNvsnEv84C8GHzMnT2d9M4IiGSM9Py5suWLWPEiBHMmDGD2rVr89tvv9GyZUvOnDlD8eLFUz2nc+fO3Llzh9mzZ+Pl5UVYWBiJiYlZHLkQQuRNu87f5YMVJwDoXcuDQQ1KahyRECnpFEVRtLp59erV8fX1ZebMmcZ9ZcuWpX379kyaNCnF8Zs2baJr165cvnyZfPlerW83MjISR0dHIiIicHBweOXYhRAirzlx/SFv/36AmHg9bSq68lPXKpiYyOzDImuk5/tbs26p+Ph4jh49SrNmzZLtb9asGfv27Uv1nHXr1uHv7893331H0aJFKV26NB988AGPHz9+7n3i4uKIjIxM9hBCCJE+l+8+os/cw8TE66njVYApnStJYiOyLc26pe7du4der8fFJXkRmouLC7dv3071nMuXL7Nnzx6srKxYvXo19+7dY9CgQdy/f/+5dTeTJk3i888/z/D4hRAirwiLjKVX4CHuR8dToagjv/b0w9JMZh8W2ZfmBcXPLqimKMpzF1kzGAzodDoWLVpEtWrVaNWqFT/88ANz5859buvNmDFjiIiIMD6uX7+e4e9BCCFyq8jYBHoFHuLGg8d45LdhTp+q2FlqWq4pxEtp9gktUKAApqamKVppwsLCUrTmJHF1daVo0aI4Ojoa95UtWxZFUbhx4walSpVKcY6lpSWWlpYZG7wQQuQBsQl63pl3hH9vR1HAzpL5fatTwE7+norsT7OWGwsLC/z8/AgKCkq2PygoiFq1aqV6Tu3atbl16xaPHj0y7jt//jwmJiYUK1YsU+MVQoi8RG9QGLE0mINX7mNnaca8vlUpnt9G67CESBNNu6VGjhzJ//73PwIDAzl79izvv/8+ISEhDBw4EFC7lHr16mU8vlu3buTPn58+ffpw5swZdu3axYcffkjfvn2xtpa1TIQQIiMoisL4tafZ9M9tLExNmNXLj/JFHF9+ohDZhKYdp126dCE8PJwvvviC0NBQfHx82LBhA+7u7gCEhoYSEhJiPN7Ozo6goCCGDh2Kv78/+fPnp3PnzkycOFGrtyCEELnOj1svsPhgCDodTOtamVolC2gdkhDpouk8N1qQeW6EEOL5Fh64xrg1pwH4sr0PPWu4axyREKocMc+NEEKI7GXjqVDGr1UTm2GNS0liI3IsSW6EEEKw/1I4w5cGoyjwdrXivN8k5ehTIXIKSW6EECKPO3MrknfnHyFeb6BZORcmtvd57nxjQuQEktwIIUQedv1+DAFzDhEVl0g1j3z89HYVTGVZBZHDSXIjhBB5VPijOHoFHuJuVBzehe35PcAfK3NZVkHkfJLcCCFEHhQZm0CfuYe5ci+aok7WzOtbDUdrc63DEiJDyAIhQgiRx+w4F8Ynq05xKyIWZxtz5verhouDldZhCZFhJLkRQog8IiImgS//OsMfR28AUDyfDb9086VkQTuNIxMiY0lyI4QQecDmf24zds1p7kbFodNBn1qefNC8NDYW8jUgch/5VAshRC4W/iiOCevPsP7ELQBKFLTl+04V8XPPp3FkQmQeSW6EECIXUhSFP0+G8tm6f7gfHY+piY5365VgeONSMiJK5HqS3AghRC4TFhnL+LWn+fufOwB4F7bnu04VqVjMSdvAhMgi6U5uPDw86Nu3L71796Z48eKZEZMQQohXoCgKq47d5Is/zxDxOAEzEx1DGnkxqIEXFmYy84fIO9L9aR81ahRr166lRIkSNG3alKVLlxIXF5cZsQkhhEijWw8f02fuYUatOEHE4wQqFHVk/dA6jGhSWhIbkefoFEVRXuXEEydOEBgYyJIlS0hMTKRbt2707dsXX1/fjI4xQ6VnyXQhhMjuFEVhyaHrfL3hLI/iErEwM2FEk1K8W7cEZqaS1IjcIz3f36+c3CRJSEhgxowZfPzxxyQkJODj48Pw4cPp06dPtlx4TZIbIURuERIew+hVJ9l3KRwA3+JOfNepIl6F7DWOTIiMl57v71cuKE5ISGD16tXMmTOHoKAgatSoQb9+/bh16xZjx45ly5YtLF68+FUvL4QQ4jkMBoX5+6/y7aZzPE7QY2VuwofNveldy0MWvRSCV0hujh07xpw5c1iyZAmmpqb07NmTqVOn4u3tbTymWbNm1KtXL0MDFUIIAZfvPuKjP05y5NoDAGqUyMe3b1bEPb+txpEJkX2kO7mpWrUqTZs2ZebMmbRv3x5z85QLrZUrV46uXbtmSIBCCCEgUW9g9p4r/BB0nrhEA7YWpoxpVZZu1YpjIq01QiST7uTm8uXLuLu7v/AYW1tb5syZ88pBCSGE+M+521F89McJTtyIAKBe6YJM6liBok7WGkcmRPaU7uQmLCyM27dvU7169WT7Dx48iKmpKf7+/hkWnBBC5GUJegMzd1zi520XSNAr2FuZ8WmbcnTyK5YtB2wIkV2ke5zg4MGDuX79eor9N2/eZPDgwRkSlBBC5HWnb0bwxvS9/BB0ngS9QpOyhdgysj5v+btJYiPES6S75ebMmTOpzmVTpUoVzpw5kyFBCSFEXhWXqOfnrReZufMSeoOCs405E94ozxuVikhSI0QapTu5sbS05M6dO5QoUSLZ/tDQUMzMZKkqIYR4VcdDHvDhHye5GPYIgNYVXfn8jfIUsLPUODIhcpZ0ZyNNmzZlzJgxrF27FkdHRwAePnzIJ598QtOmTTM8QCGEyO0ex+v5Iegcs/dcwaBAATtLJrYvTwsfV61DEyJHSndyM2XKFOrVq4e7uztVqlQBIDg4GBcXFxYsWJDhAQohRG528HI4H688ydXwGAA6+hbl0zblcLKx0DgyIXKudCc3RYsW5eTJkyxatIgTJ05gbW1Nnz59ePvtt1Od80YIIURK0XGJfLvpX+bvvwZAYQcrJnWsQEPvQhpHJkTO90pFMra2trz77rsZHYsQQuQJey7c4+OVJ7n58DEAb1dzY0yrsjhYyT8QhcgIr1wBfObMGUJCQoiPj0+2/4033njtoIQQIjeKjE3g67/OsvSwOp1GMWdrvulYkTqlCmgcmRC5yyvNUNyhQwdOnTqFTqcjaVHxpCGKer0+YyMUQohcYOvZO4xdfZrbkbEA9K7lwYfNy2BrKaNMhcho6Z7Eb/jw4Xh6enLnzh1sbGz4559/2LVrF/7+/uzYsSMTQhRCiJzrQXQ87y8Lpt+8I9yOjMWzgC3LB9RkwhvlJbERIpOk+/+s/fv3s23bNgoWLIiJiQkmJibUqVOHSZMmMWzYMI4fP54ZcQohRI6z8VQo49ee5t6jeEx08E7dErzftDRW5qZahyZErpbu5Eav12NnZwdAgQIFuHXrFmXKlMHd3Z1z585leIBCCJHT3I2K47N1p9lw6jYApQrZ8f1blajs5qRtYELkEelObnx8fDh58iQlSpSgevXqfPfdd1hYWDBr1qwUsxYLIUReoigK607cYsK6f3gQk4CpiY5BDUoypJEXlmbSWiNEVkl3cjNu3Diio6MBmDhxIm3atKFu3brkz5+fZcuWZXiAQgiRE9yOiGXcmlNsORsGQDlXB77rVBGfoo4aRyZE3qNTkoY7vYb79+/j7OycIxZ1i4yMxNHRkYiICBwcHLQORwiRwymKwoojN/jyrzNExSZiYWrCsMZeDKhfEnPTdI/ZEEI8R3q+v9PVcpOYmIiVlRXBwcH4+PgY9+fLl+/VIhVCiBzsxoMYxqw6xe4L9wCo5ObE950qUtrFXuPIhMjb0pXcmJmZ4e7uLnPZCCHyNINBYdHBa3yz8V+i4/VYmpnwQbMy9K3jialJ9m/BFiK3e6WamzFjxrBw4UJpsRFC5DmhEY8ZsTSYg1fuA1DNIx/fdqqIZwFbjSMTQiRJd3Lz008/cfHiRYoUKYK7uzu2tsn/hz527FiGBSeEENlJbIKefnOPcCY0EhsLUz5u4U3PGu6YSGuNENlKupOb9u3bZ0IYQgiR/X3x5xnOhEaSz9aCVe/VwkNaa4TIltKd3Hz22WeZEYcQQmRra4NvsvhgCDodTOtSWRIbIbIxGacohBAvcenuIz5ZdQqAIQ29qFe6oMYRCSFeJN0tNyYmJi+cz0ZGUgkhcpPYBD2DFx0jOl5PjRL5GNGktNYhCSFeIt3JzerVq5NtJyQkcPz4cebNm8fnn3+eYYEJIUR2MGHdP/x7O4oCdhb81LWKDPUWIgdId3LTrl27FPs6depE+fLlWbZsGf369UvX9WbMmMH3339PaGgo5cuXZ9q0adStWzfVY3fs2EHDhg1T7D979ize3t7puq8QQrzM6uM3WHr4Ojod/Ni1CoUcrLQOSQiRBhlWc1O9enW2bNmSrnOWLVvGiBEjGDt2LMePH6du3bq0bNmSkJCQF5537tw5QkNDjY9SpUq9TuhCCJHCxbAoPll1GoBhjUpR26uAxhEJIdIqQ5Kbx48f8/PPP1OsWLF0nffDDz/Qr18/+vfvT9myZZk2bRpubm7MnDnzhecVKlSIwoULGx+mprLarhAi48TEJzJo0TEeJ+ip7ZWfYY3lH1BC5CTp7pZ6doFMRVGIiorCxsaGhQsXpvk68fHxHD16lNGjRyfb36xZM/bt2/fCc6tUqUJsbCzlypVj3LhxqXZVJYmLiyMuLs64HRkZmeYYhRB502dr/+H8nUcUtLdkWhepsxEip0l3cjN16tRkyY2JiQkFCxakevXqODs7p/k69+7dQ6/X4+Likmy/i4sLt2/fTvUcV1dXZs2ahZ+fH3FxcSxYsIDGjRuzY8cO6tWrl+o5kyZNkkJnIUSa/XH0BiuO3sBEBz91rUJBe0utQxJCpFO6k5vevXtnaADPDitXFOW5Q83LlClDmTJljNs1a9bk+vXrTJ48+bnJzZgxYxg5cqRxOzIyEjc3twyIXAiR25y/E8W4Nep8Nu83KU3Nkvk1jkgI8SrSXXMzZ84cVqxYkWL/ihUrmDdvXpqvU6BAAUxNTVO00oSFhaVozXmRGjVqcOHChee+bmlpiYODQ7KHEEI8KzpOrbOJTTBQt1QBBjf00jokIcQrSndy880331CgQMpRA4UKFeLrr79O83UsLCzw8/MjKCgo2f6goCBq1aqV5uscP34cV1fXNB8vhBDPUhSF8WtOczHsES4OlkztUlkWwxQiB0t3t9S1a9fw9PRMsd/d3f2lQ7ifNXLkSHr27Im/vz81a9Zk1qxZhISEMHDgQEDtUrp58ybz588HYNq0aXh4eFC+fHni4+NZuHAhK1euZOXKlel9G0IIYbT8yHVWHb9prLMpYCd1NkLkZOlObgoVKsTJkyfx8PBItv/EiRPkz5++/ukuXboQHh7OF198QWhoKD4+PmzYsAF3d3cAQkNDkyVM8fHxfPDBB9y8eRNra2vKly/PX3/9RatWrdL7NoQQAoCzoZF8uvYfAEY1K0P1ElJnI0ROp1MURUnPCR999BHLly9nzpw5xiLenTt30rdvXzp16sTkyZMzJdCMEhkZiaOjIxEREVJ/I0Qe9ygukTd+3sPle9E0KFOQwICq0h0lRDaVnu/vdLfcTJw4kWvXrtG4cWPMzNTTDQYDvXr1SlfNjRBCaElRFMauPsXle9G4OlrxQ2epsxEit0h3y02SCxcuEBwcjLW1NRUqVDB2JWV30nIjhABYfDCET1afwtREx7J3a+DvkU/rkIQQL5CpLTdJSpUqJWs6CSFypH9uRTBhvVpn81HzMpLYCJHLpHsoeKdOnfjmm29S7P/+++956623MiQoIYTILFGxCQxedIz4RAONvQvxTt0SWockhMhg6U5udu7cSevWrVPsb9GiBbt27cqQoIQQIjMoisLoVae4Gh5DEUcrJr9VSepshMiF0p3cPHr0CAsLixT7zc3NZVFKIUS2tvDANf46GYqZiY7p3X1xtk35t0wIkfOlO7nx8fFh2bJlKfYvXbqUcuXKZUhQQgiR0U7fjODLP88CMLqlN77F077QrxAiZ0l3QfH48eN58803uXTpEo0aNQJg69atLF68mD/++CPDAxRCiNcVGZvAoEXHiNcbaFrOhX51Us6yLoTIPdKd3LzxxhusWbOGr7/+mj/++ANra2sqVarEtm3bZGi1ECLbURSFj/84Scj9GIo5WzO5UyV0OqmzESI3e6Wh4K1btzYWFT98+JBFixYxYsQITpw4gV6vz9AAhRDidczbd5WNp29jbqrjl26+ONqYax2SECKTpbvmJsm2bdvo0aMHRYoUYfr06bRq1YojR45kZGxCCPFaTlx/yFcb1DqbT1qVpZKbk7YBCSGyRLpabm7cuMHcuXMJDAwkOjqazp07k5CQwMqVK6WYWAiRrUTEJDB48TES9Aotyhemdy0PrUMSQmSRNLfctGrVinLlynHmzBl+/vlnbt26xc8//5yZsQkhxCtRFIUP/jjBjQePcctnzbedKkqdjRB5SJpbbjZv3sywYcN47733ZNkFIUS2NnvPFYLO3MHC1IQZ3fxwtJY6GyHykjS33OzevZuoqCj8/f2pXr0606dP5+7du5kZmxBCpNvxkAd8s/FfAMa1KUuFYo4aRyREHqAo8PgB3D4N5zfD2T81DSfNLTc1a9akZs2a/PjjjyxdupTAwEBGjhyJwWAgKCgINzc37O3tMzNWIYR4oYcx8QxZfJxEg0LrCq70rOGudUhC5HyKAnGREHETIp88Ujy/BQnR/53j6AZl22gWsk5RFOVVTz537hyzZ89mwYIFPHz4kKZNm7Ju3bqMjC/DpWfJdCFEzqEoCu/MP8KWs2F45Ldh/dA62FtJd5QQLxUbqSYnkTf+S1SSPb8J8Y/Sdi2b/OBQBJzcoctCyMBat/R8f79WcpNEr9ezfv16AgMDJbkRQmhi1q5LfL3hXyzMTFg9qBbli0h3lBDEPXpBa8uT5CUujetCWjuDQzE1eXEsqv7XodiT50+2za0z7a1keXKTk0hyI0Tuc/TafTr/dgC9QeGrDj50ry7dUSIPiI9Wk5OIG/+1sCR7fhPiItJ2LSvHpxKVIs8kMcXAwRUsbDP3/bxEer6/X2mGYiGEyC7uR6t1NnqDQttKRehWrbjWIQnx+uJj/ktSUmttibgBsQ/Tdi1Lx6eSlietLMbWlif7Le0y9e1kNUluhBA5lsGgMHJ5MKERsZQoYMukjhVkPhuRPSgKJDyGuKgnj4innkepdS5xUWqXUFzkf/uibqsJzOP7abuPhX3ybiHHYv8lMUnPLfPeYB9JboQQOdZvuy6z49xdLM1M+KW7L3aW8idNvCZFgcS4/xKOuMinEpFUEpUXvWZIfL1YzG3/S1yebml5+rmVlFekRv4SCCFypMNX7zN58zkAPn+jPGVd5Y98npcY9yTheKaV5LmJSmTy/ya9ZkjIwKB0YOmgJiGW9k8eTz23cki+befyXyuMlWOGjjbKSyS5EULkOOGP4hiy+Bh6g0KHKkXpUtVN65CEFhQFTi6DHZPUOhR9fAZeXJd6MpIiIXlBomLpoBbhSoKS5SS5EULkKAaDwvvLT3AnMo6SBW2Z2N5H6mzyoqg78OcIOLch5WsWdqkkHUkJh2MqiUpSkvLUcRZ2YJLmSfxFNiPJjRAiR5mx4yK7zt/FytyEGd39sJU6m7xFUeD0StjwgTrdv4k5NPgYKnZVExULOzAx1TpKoTH5qyCEyDH2Xwrnh6DzAHzZzocyhfPeKJA87VEY/Pk+/Ptk3SLXStB+JriU1zYuke1IciOEyBHuRsUxbOlxDAq86VuMt/ylziZPOb0K/hqlDpE2MYP6H0Od98FUltgQKUlyI4TI9vQGhfeXBXM3Ko5Shez4sr38Sz3PiL6nJjVn1qjbLhWgw0woXEHTsET2JsmNECLbm77tInsu3sPa3JQZ3X2xsZA/XXnCmbXw50iIuae21tT9AOqOAjMLrSMT2Zz8hRBCZGv7Lt5j2la1zuarDj6UcpE6m1wvOlwtGP5nlbpdqDy0nwFFKmsalsg5JLkRQmRbYVGxDFsajKJAF383OvoW0zokkdnOrleLhqPvgs4U6o6Eeh9Ja41IF0luhBDZkt6gMHxJMPcexeFd2J7P20mdTa4Wcx82fgynlqvbBb3VkVBFfbWNS+RIktwIIbKlH7ecZ//lcGwtTPmluy9W5jJ3Sa717wZ1Qr5Hd0BnArVHQIPRYGapdWQih5LkRgiR7ew6f5eft18E4OuOFShZ0E7jiESmePwANo6Gk0vV7QKlof2vUMxP27hEjifJjRAiW7kTGcv7y9Q6m7erFadd5aJahyQyw/m/Yf1wiApVW2tqDYUGn4C5ldaRiVxAkhshRLaRqDcwdMlxwqPjKevqwGdty2kdkshojx/C32MheKG6nd9Lra1xq6ZpWCJ3keRGCJFtTN1ynkNX7mNnacYMqbPJfS5sgXVDIeoWoIOag6HRODC31joykctIciOEyBZ2nAvjl+2XAPjmzQp4FrDVOCKRYWIj1Naa4wvU7Xwl1Naa4jW0jUvkWpLcCCE0FxrxmPeXBQPQs4Y7bSoW0TYgkXEubYO1QyHyBqCDGu9Bo/FgYaN1ZCIXk+RGCKGpBL2BoYuP8yAmAZ+iDoxrU1brkERGiIuCzePh6Bx129kD2s0Aj9qahiXyBkluhBCamrz5HEeuPcDe0oxfuvliaSZ1Njne5R1qa01EiLpdbQA0+QwspKtRZA1JboQQmtn27x1+23kZgO86VcQ9fw748ouPgdsnIX8psM2vdTTZS9wj2PIZHP6fuu1UXG2t8ayrbVwiz5HkRgihiZsPHzNy+QkAetfyoGUFV40jSoNr+2HNe/DgCqCDIlXAqzF4NYGi/mCah/+kXtkNawfDw2vqdtX+0ORzsJQJGEXWy8P/JwohtKLW2RzjYUwClYo5MqaVt9YhvVh8DGybCAdmAAqY20JCNNw6pj52fQ+WjlCivproeDUGxzyyyGd8NGz5HA79pm47ukG76VCigaZhibzNROsAZsyYgaenJ1ZWVvj5+bF79+40nbd3717MzMyoXLly5gYohMhw3236l2MhD3GwMmN6dq+zCTkIv9aBA78AClTpAaPOwsh/1S6X8h3B2hniIuDsOlg/DKaWh1+qw6ZP4OJWSHis9bvIHNf2wcza/yU2fr3hvX2S2AjN6RRFUbS6+bJly+jZsyczZsygdu3a/Pbbb/zvf//jzJkzFC9e/LnnRURE4Ovri5eXF3fu3CE4ODjN94yMjMTR0ZGIiAgcHBwy4F0IIdIj6Mwd3pl/BIDfevrRvHxhjSN6joTHsP0r2DcdUMDeFdr+BKWbpTzWoIdbx9VE5uIWuHkEFMN/r5tZgUcdKPmkC6tAKdDpsuytZLj4GNj2JRyYCSjgUAze+EltsRIik6Tn+1vT5KZ69er4+voyc+ZM476yZcvSvn17Jk2a9NzzunbtSqlSpTA1NWXNmjWS3AiRQ1y/H0Prn3YTGZtIvzqejG+TTZdXuHEEVg+E8AvqdqW3ocUktYUmLR4/UEcMXdwCF7c9mZH3KY5uaiJQsrHalWXlmKHhZ6qQA7BmENxXJ1zEtxc0m5iz3oPIkdLz/a1ZzU18fDxHjx5l9OjRyfY3a9aMffv2Pfe8OXPmcOnSJRYuXMjEiRNfep+4uDji4uKM25GRka8etMhZji+E26ehyQRZjC8biE80MGTJcSJjE6ns5sTHLbJhnU1CLOyYBPt+Ulte7Fyg7Y9QpmX6rmPtDOU7qA9FgbCzcOlJq861fRBxHY7OVR86U3VdpaRkx7UymGheMZBSwmO17mj/k+45+yJqa02pplpHJkQKmiU39+7dQ6/X4+Likmy/i4sLt2/fTvWcCxcuMHr0aHbv3o2ZWdpCnzRpEp9//vlrxytymIch6orDhkQwJEDrKVpHlGfFxCfy18lQFh4M4cT1hzhamzO9WxUszLLZF/jNo2qLxN1/1e2KXaDFN2CT7/Wuq9OBSzn1UWuoWoB7de9/yU74RQjZrz62TQSbAlCy0ZNkpxHYFXr99/a6rh9WR4kltWRV7g7NvwZrJ03DEuJ5NB8tpXum31lRlBT7APR6Pd26dePzzz+ndOnSab7+mDFjGDlypHE7MjISNze3Vw9Y5Ax7f1QTG1Dn3PCoC+XbaxpSXqIoCqdvRrL0cAjrgm8RFaf+LixMTZjapRLFnLPR1PuJcbDzW9gzDRQ92BaENtOgbJvMuZ+FrVq3k1S78+Dqk1qdrXBlJ8Tcg1PL1QdA4Yr/jcByqw6m5pkTV2oSYmHH17Dv5yctWYXV1prSzbMuBiFegWY1N/Hx8djY2LBixQo6dOhg3D98+HCCg4PZuXNnsuMfPnyIs7Mzpqb/jaowGAwoioKpqSmbN2+mUaNGL72v1NzkAVG3YVpF0MepzfyXtoKlAwzYqS7YJzJNREwCa0/cZOmh65wJ/a8L2D2/DZ393XjLrxiFHLJRF+GtYLVFIuyMuu3zJrT8XrvJ+RLj4cah/wqTb59M/rqFPXjWezK3TmN1SYPMcuOo+rO5d07dTm/dkRAZLEfU3FhYWODn50dQUFCy5CYoKIh27dqlON7BwYFTp04l2zdjxgy2bdvGH3/8gaenZ6bHLHKIfT+riY1bdei2DOa2husHYUUf6LcZzCy1jjBXURSFQ1fus/TwdTacCiUuUR0lZGFmQkufwnSp6kYNz/yYmGSj0UGJ8ercNLunqK01NgWgzQ9QLuXfnixlZqGOqvKooy5X8ChMXXjy4lY1SY8Jh3N/qQ+A/F5qq07Jxuo5GbEYZWIc7PgG9k77r+6ozTTwbvX61xYii2jaLTVy5Eh69uyJv78/NWvWZNasWYSEhDBw4EBA7VK6efMm8+fPx8TEBB8fn2TnFypUCCsrqxT7RR4WHQ5HAtXn9T5Um/A7BarzlIQGQ9Bn0PIbTUPMLe5GxbHy2A2WHb7OlXvRxv3ehe3pWtWN9lWK4mRjoWGEzxF6Um2RuHNa3S7XXq3Jsi2gaVipsisElbqqD4MBbp/4bwTW9YNqvU74RTj4K5hagnvN/5KdQmXTP9z85rEndUdn1e0Kb0HL716/7kiILKZpctOlSxfCw8P54osvCA0NxcfHhw0bNuDu7g5AaGgoISEhWoYocpoDMyAhBlwrqX/kQZ0ptv2vsKQLHJyp/gs3s+opcjm9QWHX+bssPRzC1rNhJBrUXm1bC1PeqFyELlWLU6mYY6p1c5rTJ6gtNbu+V+uxrPOpSY1PR60jSxsTE3W5hyJV1MQ9NgKu7HqS7GxVR2Bd3qE+GKeOZvJqpP5/UKLBi7uTEuNh13ew+4en6o6mQtm2WfPehMhgms5zowWpucnFHj+EaRUgLhK6LEz5h/nvsbB/ujofx4Dd4OyuSZg50fX7Maw4cp0VR28QGhFr3O9b3ImuVYvTuqIrtpaaj094vtun1daapBqWsm2h9Q/ZYyRSRlAUuHdBTXQubYWreyDxv98TOhN17aukwuQiVcDkSf1i6AlY/R6E/aNua113JMRz5JhJ/LQgyU0utut7dShtwbLqFPDPzhWiT4DAFurssUX9oc9GtcZBpCouUc+WM2EsPRzCnov3SPpL4WRjTscqxehS1Y0yhe21DfJl9AnqKKid36pTAlg7Q6vJ6hd4dmxdyigJj9X5dJJqdZKGtyexdoYSDdXk7vD/1JYsm/xqwiejCkU2JcnNC0hyk0vFPVJbbR7fh47/g4pvpX7cg2vwW121Sb/mEGj+VdbGmQNcDIti6aHrrDp+k/vR8cb9dbwK0KWqG83Ku2TvtaCS3DmjttaEBqvbZVqrXS32Li88LVeKuPHfCKzLO9V1sJ5Wrh20mgJ2BbWJT4g0yBGjpYTIUEfnqIlNvhLqrLDP4+yuLna4rLvaReVRF8q0yLo4s6mkifaWHb7OkWsPjPtdHCyfDOF2o3j+bDQ3zYvoE2Hfj+qIH308WDmpRbEVO+fu1poXcSwGfgHqQ5+otl5e3KoWDpfvmHPqjoRII0luRM6X8Fgd/g1QZySYvuRjXbYNVB+ojjBZMxAG7lH/+OcxiqJw6mYESw9fZ13wLR49mWjP1ERHI+9CdK3qRv3SBTEzzWYzCb9I2L9qa82tY+p26RbqMGYHV03DylZMzaB4DfUhRC4lyY3I+Y4vhEd31MUIK3ZJ2zlNv1AXAAwNhj/6Qe8/s3bmVw1FxCSwJvgmSw9f5+wzE+11qepGJ99sNtFeWhj0aoK7/Wt1jiNLR3XIf6W3825rjRB5mCQ3ImdLjFeXWgCoPTztBcJmlvDWXPitHlw/ANu/UhfYzKUUReHglfssS2WivVY+helStTjVPfNlr4n20ureBbW15sZhddurqbpEgEMRbeMSQmhGkhuRs51cps7vYecCVXqm79x8nvDGz7AiAPZMBfc6UKpJ5sSpkbCoWFYevcnyIzlsor20MOjVeY22TVSHPVs6qIs5VukhrTVC5HGS3IicS58Ie35Qn9caCuav0JVSvj1c7a8Oh139rlp/k8P/xa83KOw8H8bSQ9fZ+m8Y+mQT7RWla1U3KmbXifbS6t5FWDtInaUX1NWz3/g5T9ZOCSFSkuRG5Fz/rIb7l9WZZv36vPp1mn2lfknePgUr+0OvdS8vSs6GkibaW37kBrcjc+BEe2lhMKiF4Fs/V1trLOyh+UTwDZDWGiGEUQ7/SyfyLIMBdk9Wn9ccBJZ2r34tcyt4a55af3NtL+z8BhqNy5g4M1lcop6gM3dYdvh6son2nG3M6eirTrRX2iWbT7SXVuGXYO0QCNmnbnvWh3bTwam4tnEJIbIdSW5EznTuL3XWVUtHqPbu618vf0lo+yOs7Ae7JoN7bSjZ8PWvm0ku3Ili6eHrrDp2gwcxCcb9OW6ivbQwGODw77BlgrpumLktNPsS/PtKa40QIlWS3IicR1HUpRYAqr2jrhWVESp0UhciPDYPVr0DA/dmq9lsY+IT+fPJRHtHU5lor7O/G275cshEe2l1/4raWnNtj7rtUVdtrXH20DQsIUT2JsmNyHkublEX+zO3gRqDMvbaLb+FG0fURQRX9Yeea/5bYFAjF8MeMXvPFdafSD7RXmPvQnSt5ka9Ujlsor20MBjgyGwI+gwSotXfddMvwL9fyjXDhBDiGZLciJxFUWDnd+pz/74Zv3KxubU6/82sBmorzq7J0ODjjL1HGsUnGpix4yK/bL9Igl4tpsnRE+2l1YNrsG6I+vMHtYuw3XR1aQ0hhEgDSW5EznJ1N9w4BKaW6vDvzFCwNLT5AVYPUIuL3WuBZ93MuddzHAt5wOiVJzl/5xEADcoUZEC9ktQokS9nD+F+EUVR1wjbPB7iH4GZtTqxYrV3pbVGCJEuktyInGXXkxFSvr3AvnDm3adSV7iyG4IXqsPDB+7JkhWTo+MS+f7vc8zbfxVFgfy2Fkx4ozxtKrrm3qQG4OF1WDcULm9Xt91qQPsZaqG3EEKkkyQ3Iue4fgiu7AQTM3WphczW6jt19eS7/6oT/HVfmaktCDvOhTF29WluPnwMQEffooxvXQ5n2xw6g3BaKAocXwCbPoH4KDCzgsafqgubalzrJITIuSS5ETlHUqtNpa7g5Jb597OwfVJ/0xAubVNnQ673QYbf5n50PF+s/4c1wbcAKOZszdcdKlCvdOa3FGkq4iasH6YWiAMUq6a21hQopW1cQogcT5IbkTOEnoALf4POBOqMzLr7FioLrb5XC1y3f6XW37jXypBLK4rCuhO3+Hz9Ge5Hx2Oigz61PRnVrDQ2Frn4f01FgeBFamtNXIRaP9VoHNQcLK01QogMkYv/gopcJanVxufNrK/DqNJDLWQ+uQz+6KfW37zmKK2bDx8zbvUptp+7C0AZF3u+7VSRym5OGRBwNhZ5C9YPhwub1e2iftB+JhQso21cQohcRZIbkf2F/Qtn16vP647K+vvrdND6B7h5DMIvwJqB8PayV6q/0RsUFuy/ynd/nyMmXo+FqQnDGnvxbr2SWJjl8hFBp1fBnyMgNgJMLaDhJ1BzaI5cx0sIkb3JXxWR/e35AVDAu43aTaQFSzu1/uZ/jdVWh/0/p7uo+cKdKD5eeZJjIQ8BqOrhzKSOFfEq9BrrYuUE+gR1Mr4Dv6jbRaqorTVa/S6FELmeJDcie7t/GU6tUJ9nQjFvuhT2gRbfqK0PWz6H4jXBrdpLT4tL1DNzxyXjZHx2lmZ83NKb7tWKY2KSi4d3A0TdgRW9/1vssvYIaDReWmuEEJlK/sKI7G3PVFAM4NVU/Re/1vx6q/U3p1fCH31hwC6wyffcw49eUyfjuxCmTsbX2LsQX7b3oYiTdRYFrKGQA7A8AB7dBgt76DATyrbVOiohRB4gyY3IviJuQPAS9Xm9D7WNJYlOB22mwa3jaqvS2sHQdXGK1anz7GR8oI6GOjQL/v4EDIlQ0Bu6LJQh3kKILCPJjci+9v4EhgR1Jeji1bWO5j9WDk/qb5rAuQ1wYIY6jPmJ7efCGPfUZHxv+hZjXOuyuXsyviTx0epoqKSuxPId4I3pas2SEEJkEUluRPYUdQeOzVOfa11rkxrXStD8a9jwgVos61aDcCcfvvzzTN6bjC9J+CVY1lNdUV1nCs2+VFdtz+0tVUKIbEeSG5E97Z8OibFQrCp41tc6mtRV7a/W35xZS/TinnSI/ZqQGHNMdNC3ticjc/tkfE87txFWDVAn5bMtpLZsedTWOiohRB6VyyfWEDlSzH04PFt9Xu/D7Psvf52Om/W+I8ysMLYxNxmTMB1vFztWDarNuDbl8kZiY9DDtomwpKua2LhVV4usJbERQmhIkhuR/Rz8FRKioXAFKNVM62hSpTcozN17haYzgukXPYR4xZSWpof5s8bZ3D/LcJKY+7CoE+z6Xt2uNgAC/gQHV23jEkLkeXngn5YiR4mNUJMbyLatNuefTMZ3/MlkfFYefkSU/JSCez/DbMt4cK8BRSprGmOmu3UclvWCiBAws4a2P0KlLlpHJYQQgCQ3Irs5/D81wSlQBryz15wocYl6Zmy/xIwdqUzGp6sJ4Yfh3z/VSesG7FJHVeVGx+bDXx+APg6cPdVh3oV9tI5KCCGMJLkR2Ud8NOx/MkV/3VGvtHZTZnl2Mr4mZdXJ+Fwdn5qMr910CD0JD67A+mHQaU62bHl6ZQmxsPGj/0axlW4JHX4FaydNwxJCiGdJciOyj6NzISYcnD3U1b+zgUdxiUxO62R81s7QKRDmtIB/Vqvz81Ttp03gGe3hdVjeU+2OQgeNxkKd7JWACiFEEkluRPaQEAv7flaf1xmZLdYeenYyvk5+xRjb6iWT8blVhcafQdB42DRGXXuqcIUsijiTXNquLjXx+L6awL35P/BqonVUQgjxXNp/gwgBELwIokLBoShUelvTUMIfxaWYjG9SxwrULZXGyfhqDoGre+DC32r9zbs7wNI+0+LNNAYD7J2qDvVWDOrEhZ0XgLO71pEJIcQLSXIjtKdPgD3T1Oe1h4OZNssUKIrC2uBbfPHnGe5Hx7/6ZHwmJmotyq91IPwi/DkSOs7KWfU3sRGw+j0495e6XbkHtJ4M5nlgwU8hRI4nyY3Q3snl6pBi24Lg20uTEG48iGHcmtPsOHcXAO/C9nzzZsVXn7PGJt+T+ptWcGo5eNbV7L2l250zsKwH3L8EphbQ6nvwDchZyZkQIk+T5EZoy6CH3VPU57WGZnnLgN6gMH//Vb7/+xwx8XosTE0Y1tiLAfVLYm76msWyxWtAo3Gw9XPY8BEU9QeXchkTeGY59QesGwoJMeBQDLrMh6J+WkclhBDpIsmN0NaZNWoLgbUz+PfN0ls/OxlfVQ9nJnWsiFehDFzBuvYIuLYXLm55Un+zHSxsM+76GUWfAEGfqiucg7qeV6dAsC2gbVxCCPEKJLkR2jEYYNdk9Xn197Ks6Da1yfhGt/SmW7XimJhkcNeLiQl0+E2tv7l3Tp38rsPMjL3H64q6rSZeIfvV7Toj1RYnE1NNwxJCiFclyY3QzvmNEHYGLOyh+rtZcss0TcaX0WwLqMOn57WFE4vV+pvK3TLvfulxbT+sCIBHd9TfQ4eZUDZ7zQwthBDpJcmN0IaiPLXg4jtqt1QmenYyvgJ26mR8rSukMhlfZvCoAw3GwPav4K9Rah1LwTKZf9/nURQ4+BtsHguGRChYVl1GoYCXdjEJIUQGkeRGaOPSVnW2WzNrqDk4U2+1/d8wxq4+xa2IWCCNk/Flhrqj1PlvruxUu4H6bwULm6yNAdRlLtYPh1Mr1O3yHeGNn8EyA2uNhBBCQ5LcCG3sejJCyr9vphWt3nr4mG83/cvaJ5PxueWz5usO6ZiML6OZmKrdUzNrq91xmz5Wk4qsFH5JHeYddgZ0ptBsItR4T4Z5CyFyFc0XhpkxYwaenp5YWVnh5+fH7t27n3vsnj17qF27Nvnz58fa2hpvb2+mTp2ahdGKDHF1L4TsU+dQqTU0Qy4Zn2jgxPWHBO65wpDFx6j9zTZqfbONtcG3MNFB/zqe/D2innaJTRK7QvDm74BOXV375Iqsu/e/f8GsBmpiY1sIev8JNQdJYiOEyHU0bblZtmwZI0aMYMaMGdSuXZvffvuNli1bcubMGYoXL57ieFtbW4YMGULFihWxtbVlz549DBgwAFtbW959N2sKUkUGSKq1qdIDHFxf6RJ3o+I4FvKAY9cecCzkASdvRBCXaEh2jIkOfIs7M75NOSq96mR8maFEA6j/Eez8Fv4cAUWqZG6ti0Gv1vokzSfkVgPemvvKP3shhMjudIqiKFrdvHr16vj6+jJz5n9DY8uWLUv79u2ZNGlSmq7RsWNHbG1tWbBgQZqOj4yMxNHRkYiICBwcHF4pbvEabhyB/zVWu0SGHU/TOkWJegP/3o7i6JNE5ljIA67ff5ziOCcbc6q4OeFb3Bk/d2cqujlhZ5lNe14NepjfDq7uBpcK0H8LmFtl/H2iw2FlP7i8Xd2uPhCafqnZEhdCCPGq0vP9rdlf/vj4eI4ePcro0aOT7W/WrBn79u1L0zWOHz/Ovn37mDhx4nOPiYuLIy4uzrgdGRn5agGLjJE0r02lrs9NbMIfxXEs5KGxZebkjQgeJ+iTHaPTQelC9vi6q8mMr7szJQrYZs3Ip4xgYgodf1fnv7lzCv4eA20yuIv15jFY3gsiroO5DbT9CSq+lbH3EEKIbEiz5ObevXvo9XpcXFyS7XdxceH27dsvPLdYsWLcvXuXxMREJkyYQP/+/Z977KRJk/j8888zJGbxmm6fUue2QadOFIfaKnPuThTHQh5y/EnLzNXwmBSn2luZUaW4M37FnfF1d6KSmxMOVuZZ/AYymIMrdPwNFr4JRwLBoy74dMyYax+dBxs+AH085CuhDvN2KZ8x1xZCiGxO8zb7Z/+lrSjKS//1vXv3bh49esSBAwcYPXo0Xl5evP3226keO2bMGEaOHGncjoyMxM3N7fUDF+n3pObjTvGWLDiq51jIAU5cf0h0vD7FoV6F7PAt7oSfuzO+xZ0pWdAu42cPzg68mqiJ3p4fYN0wKFJZTUZeVUKsmtQcf9JNW7qlukK5tVNGRCuEEDmCZslNgQIFMDU1TdFKExYWlqI151menp4AVKhQgTt37jBhwoTnJjeWlpZYWlpmTNAiXfQGhQthURy79pDrF4L58OIaTICAC/X49/xF43F2lmZUdnPC190Z3+JOVHFzxtEmh7fKpEfDserSByH71flv+gWB2St8Zh+GwLKeEBoM6KDRWKgzSl0CQggh8hDNkhsLCwv8/PwICgqiQ4cOxv1BQUG0a9cuzddRFCVZTY3QTsTjBI6HPFC7mEIeEBzykKi4RACmmM/CxFRhs96P+PxlefNJ0a+vuxOlCtljmhtbZdLK1AzenK3W34SegM3jodV36bvGpW3wRz94fF+d7fnN2eDVOHPiFUKIbE7TbqmRI0fSs2dP/P39qVmzJrNmzSIkJISBAwcCapfSzZs3mT9/PgC//PILxYsXx9vbG1DnvZk8eTJDh2bMXCki7QwGhUt3Hz0p+lWLf5PWa3qajYUpTQrH0iFMLRKvETCJbV7Vszrc7M+xqLrA5uK34NBv6nIN5d54+XkGg9qltW0ioIBrZeg8P02j0IQQIrfSNLnp0qUL4eHhfPHFF4SGhuLj48OGDRtwd1f/MIeGhhISEmI83mAwMGbMGK5cuYKZmRklS5bkm2++YcCAAVq9hTwjKjaB4OsPjYnM8ZAHRMYmpjjOPb8NfsWdqfKki6mMiz1mG0ZCmB5KNsZBEpvnK90Mag2DfT/B2iHgWhGcPZ5//OOHsOY9OLdB3a7SE1pNzpwh5UIIkYNoOs+NFmSem5dTFIXL96KfTJCndjGduxPFs58UK3MTKhb7r+i3SnEnCtg9UysScRN+qqyO2umzEdxrZdn7yJH0CTCnFdw4BEV8oe/fqc9Jc+cfdRmF+5fVmZ5bTQa/gKyPVwghskiOmOcmVwpeAoW81Rlnc6D4RAOrj99g5o5LqQ7HLuZsbUxkfIs74+1qj7npS4pV9/2sJjbutSWxSQtTc+g0G36tC7eOwZYJ0OLr5Mec+gPWDYWEGHB0g87z1FXGhRBCAJLcZJzrh2HdEHXm3daTwbeX1hGlWVyinuVHbvDrjkvcfKjO/GthZkLFoo74uTtT5cncMoXs09nd8eguHJ2rPq/3QcYGnZs5FYf2M2BpNzjwi1p/491KbdXZPA4O/qoeV6IBvBkItvk1DVcIIbIbSW4ySoFS4NVUnaRu3VB1mYGW32Xr+ofYBD1LDoXw287L3I6MBaCAnSUD6pWge43i2Fi85sfjwC+Q+FhtVSjRMAMizkO8W0ONQXBghlpX02Ml/D0Wrh9QX687Sh1CbmKqbZxCCJENSc1NRjIYYM8U2PYVoKjdU53nq/8Sz0ai4xJZdPAas3Zd4d4jdRh9YQcrBtYvQddqxbEyz4AvzJj7MK0CxD+Ct5dCmZavf828JjEeApur3VNJLB3USfm8W2sXlxBCaEBqbrRiYgL1PlQLQVf2g1vH4bf6ag1FyUZaR0dUbALz91/jf7sv8yAmAYCiTta816Akb/kXw9IsA1sBDs1SExsXHyjdIuOum5eYWcBbc+DXehAXAQXLqssoZOYK4kIIkQtIy01meXBNXbQwNBh0JtBoHNR+X5PZYiNiEpiz7wpz9l4l4rGa1Ljnt2FwAy86+BZ9eVFwesVGqq02sQ+h05yMWy8prwo9AVd2g38fsLDVOhohhNCEtNxkB87u6jDepHV+tn4BN45Ch5lg5ZglIdyPjmf2nsvM33fNOFNwyYK2DGnkRduKRTDL6KQmyZHZamKTvxSUS/ts0+I5XCupDyGEEGkiyU1mMreCdtOhWFU1yTn3F8xq+GSF5nKZdtu7UXH8b/dlFhy4RsyTRSnLuNgztLEXLX1cM3epg/gY2P+L+rzuKCl4FUIIkeUkuckKfgFQ2AeWB8D9S/C/xvDGz1ChU4be5k5kLL/uvMSSQyHEJhgAKF/EgaGNStGsnEvWrKp9bD5E3wUn9wx/f0IIIURaSHKTVYr6wbs7YWVfuLxDLTi+cQSafalO3PYabj58zK87LrHs8HXi9WpSU9nNiWGNvWhYphA6XRYtSpkYB3t/VJ/XGfHa70sIIYR4FZLcZCXb/NBjlbrI4Z4f4OBMteD4rblgXzjdlwsJj2HGjousPHaDBL1aF17Vw5lhjUtRx6tA1iU1SYIXQ9QtsHeFyt2z9t5CCCHEE5LcZDUTU2jyGRTzh9UDIWQ//FYP3poH7jXTdIlLdx/xy/aLrA2+hd6gJjW1SuZnaKNS1CiRL+uTGgB9IuyZqj6vPRzMLF98vBBCCJFJJLnRindreGe7uvjh3bMwrw00mwjVB8JzkpPzd6KYvu0if568xZOchvqlCzKssRd+7vmyMPhUnP4DHl4DmwLgKws4CiGE0I4kN1oq4AXvbFWXazi9EjaNVutw3vgp2Xwm/9yKYPq2i2w8fdu4r0nZQgxpVIrKbk4aBP4Mgx52T1Gf1xoCFjbaxiOEECJPk+RGaxa28OZsdbj45nFqC0jYGeiykBMx+fl52wW2nA0zHt7SpzBDGnlRvkjWzJWTJmfXwb3z6vw9/v20jkYIIUQeJ8lNdqDTQY331InaVvSGsDPETK/D9LiBbDH4o9NBm4pFGNLQizKF7bWONjlFgV2T1efV3wOrTJz1WQghhEgDSW6ykQP6Msy3m0rvyM+pZnKO3y1+YEv+7nh2nkRJl2zUUvO085vgzmmwsIPqA7SORgghhJDkRmuKorDn4j1+3nqRQ1fvA7DNZBz/c11HnfAVNAlfBH/fhDcD1aHk2cnTrTZV+4ONxkXNQgghBJLcaEZRFLafC+OnrRcJvv4QAAtTEzpXLcbA+iUp5vwGnGqhFhtf3gGz6kPneepkgNnF5R1w8wiYWUPNIVpHI4QQQgCS3GQ5g0Fh85k7TN9+gdM3IwGwNDOhW/XiDKhXksKOVv8dXKETFCqrDhe/fxkCW0CryepyDtlBUquNXwDYFdQ2FiGEEOIJSW6yiN6gsPF0KNO3XeTf21EA2FiY0rOGO/3rlqCg/XMmvXMpD+/uUCf8O7cB1g+DG4fVJMfcKvVzssK1fXBtD5iYQ61h2sUhhBBCPEOSm0yWqDew/uQtpm+7yKW70QDYWZoRUMudfnVKkM/W4uUXsXKELotg71R16YbjC+D2Keg8H5zdM/kdPEdSq02V7uBYVJsYhBBCiFRIcpNJEvQGVh+/yYztF7kaHgOAg5UZfet40qeWJ4426VxU0sQE6o6CIlXgj37qmlSz6qtz5Hg1zvg38CI3j8GlraAzhdojsvbeQgghxEtIcpPB4hL1/HH0BjN3XOLGg8cAONuY079uCXrVdMfe6jVXyi7ZCAbshOW94NZxWPgmNBoLdUapCVBWSJqNuGJnyOeZNfcUQggh0kiSmwwSm6Bn6aEQftt1mdCIWAAK2Fnybj1Puld3x9YyA3/UTsWhzybY+CEcm692Vd04Ch1+BWunjLtPau78A//+CeigzsjMvZcQQgjxCiS5ySD/3IpkwvozALg4WDKwfknerlYcK3PTzLmhuRW88TMU9YcNH8L5jfB7Q+iyUC1CzixJrTbl2kHB0pl3HyGEEOIVSXKTQfzcnXnTtxiVizvxll+xzEtqUtw4AApXULup7l+G3xurSU/FtzL+Xvcuwj+r1ef1Psj46wshhBAZIIuKNPKGKZ0r0bOGe9YlNkmK+sK7O6FEQ0h8DKv6w4aPIDE+Y++zZyooBijdUk2ohBBCiGxIkpvcwjY/9FgJdZ+0qBz6Dea1hcjQjLn+g2twcqn6XFpthBBCZGOS3OQmJqbQeDx0XQKWDnD9APxWD67uff1r7/0RDIlQogEU83/96wkhhBCZRJKb3Mi7lTqrcaFyEB2mtuDs/0Vd6PJVRIaqEwcC1Psww8IUQgghMoMkN7lV/pLQfwtUeAsUPfz9CfzRF+Iepf9a+6eDPh6K1wT32hkfqxBCCJGBJLnJzSxsoePv0PI7MDGDf1bB/5qoo57SKvoeHAlUn9f7AHS6zIlVCCGEyCCS3OR2Oh1UHwABf4KdC9w9C7MawNn1aTv/wAxIiFGXfSiZxcs8CCGEEK9Akpu8wr0mDNgFxWtBfBQs6wFbJoA+8fnnPH4AB2epz+tKq40QQoicQZKbvMS+MASsgxqD1e09U2FhR7XrKTWHflcToULloEyrrItTCCGEeA2S3OQ1pubQ4mt1NXFzG7iyE36rr65N9bS4R2qXFKirkWfVopxCCCHEa5JvrLyqQid4ZxvkKwmRN2BOCzgy57/h4kcC1W6pfCWhfAdtYxVCCCHSQZKbvKxQWXh3O3i3UYd6/zkC1g5Rk5p9P6vH1B2pTg4ohBBC5BCS3OR1Vo7QeQE0/gx0JhC8EH7yVSf/c3SDil20jlAIIYRIF0luhFpPU3ck9FgFNvnh8X11f50Rao2OEEIIkYOYaR2AyEZKNlRXF18/XF39u3IPrSMSQggh0k2SG5Gckxv0XKV1FEIIIcQrk24pIYQQQuQqktwIIYQQIlfRPLmZMWMGnp6eWFlZ4efnx+7du5977KpVq2jatCkFCxbEwcGBmjVr8vfff2dhtEIIIYTI7jRNbpYtW8aIESMYO3Ysx48fp27durRs2ZKQkJBUj9+1axdNmzZlw4YNHD16lIYNG9K2bVuOHz+exZELIYQQIrvSKUrSlLRZr3r16vj6+jJz5kzjvrJly9K+fXsmTZqUpmuUL1+eLl268Omnn6bp+MjISBwdHYmIiMDBweGV4hZCCCFE1krP97dmLTfx8fEcPXqUZs2aJdvfrFkz9u3bl6ZrGAwGoqKiyJcv33OPiYuLIzIyMtlDCCGEELmXZsnNvXv30Ov1uLi4JNvv4uLC7du303SNKVOmEB0dTefOnZ97zKRJk3B0dDQ+3NzcXituIYQQQmRvmhcU63S6ZNuKoqTYl5olS5YwYcIEli1bRqFChZ573JgxY4iIiDA+rl+//toxCyGEECL70mwSvwIFCmBqapqilSYsLCxFa86zli1bRr9+/VixYgVNmjR54bGWlpZYWlq+drxCCCGEyBk0a7mxsLDAz8+PoKCgZPuDgoKoVavWc89bsmQJvXv3ZvHixbRu3TqzwxRCCCFEDqPp8gsjR46kZ8+e+Pv7U7NmTWbNmkVISAgDBw4E1C6lmzdvMn/+fEBNbHr16sWPP/5IjRo1jK0+1tbWODo6avY+hBBCCJF9aJrcdOnShfDwcL744gtCQ0Px8fFhw4YNuLu7AxAaGppszpvffvuNxMREBg8ezODBg437AwICmDt3blaHL4QQQohsSNN5brQg89wIIYQQOU+OmOdGCCGEECIzaNotpYWkhiqZzE8IIYTIOZK+t9PS4ZTnkpuoqCgAmcxPCCGEyIGioqJeOogoz9XcGAwGbt26hb29fZomC0yPyMhI3NzcuH79utTzZAPy+8he5PeR/cjvJHuR38eLKYpCVFQURYoUwcTkxVU1ea7lxsTEhGLFimXqPRwcHOSDmY3I7yN7kd9H9iO/k+xFfh/Pl9ZpX6SgWAghhBC5iiQ3QgghhMhVJLnJQJaWlnz22WeyllU2Ib+P7EV+H9mP/E6yF/l9ZJw8V1AshBBCiNxNWm6EEEIIkatIciOEEEKIXEWSGyGEEELkKpLcCCGEECJXkeQmg8yYMQNPT0+srKzw8/Nj9+7dWoeUZ02aNImqVatib29PoUKFaN++PefOndM6LPHEpEmT0Ol0jBgxQutQ8qybN2/So0cP8ufPj42NDZUrV+bo0aNah5UnJSYmMm7cODw9PbG2tqZEiRJ88cUXGAwGrUPL0SS5yQDLli1jxIgRjB07luPHj1O3bl1atmxJSEiI1qHlSTt37mTw4MEcOHCAoKAgEhMTadasGdHR0VqHlucdPnyYWbNmUbFiRa1DybMePHhA7dq1MTc3Z+PGjZw5c4YpU6bg5OSkdWh50rfffsuvv/7K9OnTOXv2LN999x3ff/89P//8s9ah5WgyFDwDVK9eHV9fX2bOnGncV7ZsWdq3b8+kSZM0jEwA3L17l0KFCrFz507q1aundTh51qNHj/D19WXGjBlMnDiRypUrM23aNK3DynNGjx7N3r17pXU5m2jTpg0uLi7Mnj3buO/NN9/ExsaGBQsWaBhZziYtN68pPj6eo0eP0qxZs2T7mzVrxr59+zSKSjwtIiICgHz58mkcSd42ePBgWrduTZMmTbQOJU9bt24d/v7+vPXWWxQqVIgqVarw+++/ax1WnlWnTh22bt3K+fPnAThx4gR79uyhVatWGkeWs+W5hTMz2r1799Dr9bi4uCTb7+Liwu3btzWKSiRRFIWRI0dSp04dfHx8tA4nz1q6dClHjx7lyJEjWoeS512+fJmZM2cycuRIPvnkEw4dOsSwYcOwtLSkV69eWoeX53z88cdERETg7e2Nqakper2er776irffflvr0HI0SW4yiE6nS7atKEqKfSLrDRkyhJMnT7Jnzx6tQ8mzrl+/zvDhw9m8eTNWVlZah5PnGQwG/P39+frrrwGoUqUK//zzDzNnzpTkRgPLli1j4cKFLF68mPLlyxMcHMyIESMoUqQIAQEBWoeXY0ly85oKFCiAqalpilaasLCwFK05ImsNHTqUdevWsWvXLooVK6Z1OHnW0aNHCQsLw8/Pz7hPr9eza9cupk+fTlxcHKamphpGmLe4urpSrly5ZPvKli3LypUrNYoob/vwww8ZPXo0Xbt2BaBChQpcu3aNSZMmSXLzGqTm5jVZWFjg5+dHUFBQsv1BQUHUqlVLo6jyNkVRGDJkCKtWrWLbtm14enpqHVKe1rhxY06dOkVwcLDx4e/vT/fu3QkODpbEJovVrl07xdQI58+fx93dXaOI8raYmBhMTJJ/FZuamspQ8NckLTcZYOTIkfTs2RN/f39q1qzJrFmzCAkJYeDAgVqHlicNHjyYxYsXs3btWuzt7Y2tao6OjlhbW2scXd5jb2+fot7J1taW/PnzSx2UBt5//31q1arF119/TefOnTl06BCzZs1i1qxZWoeWJ7Vt25avvvqK4sWLU758eY4fP84PP/xA3759tQ4tZ1NEhvjll18Ud3d3xcLCQvH19VV27typdUh5FpDqY86cOVqHJp6oX7++Mnz4cK3DyLPWr1+v+Pj4KJaWloq3t7cya9YsrUPKsyIjI5Xhw4crxYsXV6ysrJQSJUooY8eOVeLi4rQOLUeTeW6EEEIIkatIzY0QQgghchVJboQQQgiRq0hyI4QQQohcRZIbIYQQQuQqktwIIYQQIleR5EYIIYQQuYokN0IIIYTIVSS5EUII1MVv16xZo3UYQogMIMmNEEJzvXv3RqfTpXi0aNFC69CEEDmQrC0lhMgWWrRowZw5c5Lts7S01CgaIUROJi03QohswdLSksKFCyd7ODs7A2qX0cyZM2nZsiXW1tZ4enqyYsWKZOefOnWKRo0aYW1tTf78+Xn33Xd59OhRsmMCAwMpX748lpaWuLq6MmTIkGSv37t3jw4dOmBjY0OpUqVYt25d5r5pIUSmkORGCJEjjB8/njfffJMTJ07Qo0cP3n77bc6ePQtATEwMLVq0wNnZmcOHD7NixQq2bNmSLHmZOXMmgwcP5t133+XUqVOsW7cOLy+vZPf4/PPP6dy5MydPnqRVq1Z0796d+/fvZ+n7FEJkAK1X7hRCiICAAMXU1FSxtbVN9vjiiy8URVFXeh84cGCyc6pXr6689957iqIoyqxZsxRnZ2fl0aNHxtf/+usvxcTERLl9+7aiKIpSpEgRZezYsc+NAVDGjRtn3H706JGi0+mUjRs3Ztj7FEJkDam5EUJkCw0bNmTmzJnJ9uXLl8/4vGbNmsleq1mzJsHBwQCcPXuWSpUqYWtra3y9du3aGAwGzp07h06n49atWzRu3PiFMVSsWNH43NbWFnt7e8LCwl71LQkhNCLJjRAiW7C1tU3RTfQyOp0OAEVRjM9TO8ba2jpN1zM3N09xrsFgSFdMQgjtSc2NECJHOHDgQIptb29vAMqVK0dwcDDR0dHG1/fu3YuJiQmlS5fG3t4eDw8Ptm7dmqUxCyG0IS03QohsIS4ujtu3byfbZ2ZmRoECBQBYsWIF/v7+1KlTh0WLFnHo0CFmz54NQPfu3fnss88ICAhgwoQJ3L17l6FDh9KzZ09cXFwAmDBhAgMHDqRQoUK0bNmSqKgo9u7dy9ChQ7P2jQohMp0kN0KIbGHTpk24urom21emTBn+/fdfQB3JtHTpUgYNGkThwoVZtGgR5cqVA8DGxoa///6b4cOHU7VqVWxsbHjzzTf54YcfjNcKCAggNjaWqVOn8sEHH1CgQAE6deqUdW9QCJFldIqiKFoHIYQQL6LT6Vi9ejXt27fXOhQhRA4gNTdCCCGEyFUkuRFCCCFEriI1N0KIbE96z4UQ6SEtN0IIIYTIVSS5EUIIIUSuIsmNEEIIIXIVSW6EEEIIkatIciOEEEKIXEWSGyGEEELkKpLcCCGEECJXkeRGCCGEELmKJDdCCCGEyFX+D0DxsTnqilVUAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Evaluate the model on test data\n",
    "test_loss, test_accuracy = model.evaluate(test_images, test_labels)\n",
    "print(f\"Test Loss: {test_loss}\")\n",
    "print(f\"Test Accuracy: {test_accuracy}\")\n",
    "\n",
    "# Plot training history\n",
    "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
    "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend()\n",
    "plt.title('Training and Validation Accuracy')\n",
    "plt.show()\n",
    "\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.title('Training and Validation Loss')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Load and preprocess train, test, and validation data\n",
    "train_images, train_labels = preprocess_data(\"C:\\\\Users\\\\Addmin\\\\Desktop\\\\pets emotion detection\\\\Master Folder\\\\train\")\n",
    "test_images, test_labels = preprocess_data(\"C:\\\\Users\\\\Addmin\\\\Desktop\\\\pets emotion detection\\\\Master Folder\\\\test\")\n",
    "valid_images, valid_labels = preprocess_data(\"C:\\\\Users\\\\Addmin\\\\Desktop\\\\pets emotion detection\\\\Master Folder\\\\valid\")\n",
    "\n",
    "# Split data for training and validation\n",
    "train_images, val_images, train_labels, val_labels = train_test_split(train_images, train_labels, test_size=0.2, random_state=42)\n",
    "\n",
    "# Encode labels\n",
    "label_encoder = LabelEncoder()\n",
    "train_labels_encoded = label_encoder.fit_transform(train_labels)\n",
    "val_labels_encoded = label_encoder.transform(val_labels)\n",
    "test_labels_encoded = label_encoder.transform(test_labels)\n",
    "\n",
    "# Convert labels to TensorFlow format\n",
    "train_labels = tf.keras.utils.to_categorical(train_labels_encoded)\n",
    "val_labels = tf.keras.utils.to_categorical(val_labels_encoded)\n",
    "test_labels = tf.keras.utils.to_categorical(test_labels_encoded)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "01.jpg - Emotion: 1\n",
      "11.jpg - Emotion: 0\n",
      "14.jpg - Emotion: 0\n",
      "33.jpg - Emotion: 2\n",
      "39.jpg - Emotion: 2\n",
      "43.jpg - Emotion: 3\n",
      "62.jpg - Emotion: 1\n",
      "65.jpg - Emotion: 0\n",
      "75.jpg - Emotion: 0\n",
      "90.jpg - Emotion: 0\n",
      "005.jpg - Emotion: 0\n",
      "011.jpg - Emotion: 2\n",
      "016.jpg - Emotion: 3\n",
      "038.jpg - Emotion: 2\n",
      "045.jpg - Emotion: 0\n",
      "048.jpg - Emotion: 0\n",
      "065.jpg - Emotion: 3\n",
      "086.jpg - Emotion: 0\n",
      "089.jpg - Emotion: 3\n",
      "100.jpg - Emotion: 2\n",
      "105.jpg - Emotion: 0\n",
      "01.jpg - Emotion: 0\n",
      "09.jpg - Emotion: 0\n",
      "14.jpg - Emotion: 1\n",
      "18.jpg - Emotion: 0\n",
      "25.jpg - Emotion: 0\n",
      "47.jpg - Emotion: 2\n",
      "014.jpg - Emotion: 3\n",
      "018.jpg - Emotion: 0\n",
      "022.jpg - Emotion: 1\n",
      "029.jpg - Emotion: 0\n",
      "033.jpg - Emotion: 0\n",
      "042.jpg - Emotion: 3\n",
      "048.jpg - Emotion: 0\n",
      "060.jpg - Emotion: 0\n",
      "069.jpg - Emotion: 0\n",
      "090.jpg - Emotion: 3\n",
      "100.jpg - Emotion: 0\n"
     ]
    }
   ],
   "source": [
    "# Make predictions on test data\n",
    "predictions = model.predict(test_images)\n",
    "\n",
    "# Decode one-hot encoded labels back to original labels\n",
    "decoded_predictions = label_encoder.inverse_transform(np.argmax(predictions, axis=1))\n",
    "\n",
    "# Trigger notifications\n",
    "for i in range(len(test_images)):\n",
    "    animal_name = test_data_processed[i][0]  # Get the animal name from the processed data\n",
    "    predicted_emotion = decoded_predictions[i]\n",
    "    notification_message = f\"{animal_name} - Emotion: {predicted_emotion}\"\n",
    "    print(notification_message)\n",
    "    # Add code to trigger notification pop-up with notification_message\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define animal labels\n",
    "animal_labels = ['dog', 'bird', 'cat', 'rat', 'other']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define emotion labels\n",
    "emotion_labels = ['happy', 'sad', 'hungry']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 1000 images belonging to 4 classes.\n",
      "Found 38 images belonging to 4 classes.\n",
      "Found 36 images belonging to 4 classes.\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "\n",
    "# Define file paths\n",
    "train_path = \"C:\\\\Users\\\\Addmin\\\\Desktop\\\\pets emotion detection\\\\Master Folder\\\\train\"\n",
    "test_path = \"C:\\\\Users\\\\Addmin\\\\Desktop\\\\pets emotion detection\\\\Master Folder\\\\test\"\n",
    "valid_path = \"C:\\\\Users\\\\Addmin\\\\Desktop\\\\pets emotion detection\\\\Master Folder\\\\valid\"\n",
    "\n",
    "# Create ImageDataGenerator for training data with augmentation\n",
    "train_datagen = ImageDataGenerator(\n",
    "    rescale=1./255,\n",
    "    rotation_range=20,\n",
    "    width_shift_range=0.2,\n",
    "    height_shift_range=0.2,\n",
    "    shear_range=0.2,\n",
    "    zoom_range=0.2,\n",
    "    horizontal_flip=True,\n",
    "    fill_mode='nearest'\n",
    ")\n",
    "\n",
    "# Create ImageDataGenerator for testing and validation data without augmentation\n",
    "test_datagen = ImageDataGenerator(rescale=1./255)\n",
    "valid_datagen = ImageDataGenerator(rescale=1./255)\n",
    "\n",
    "# Load training data\n",
    "train_generator = train_datagen.flow_from_directory(\n",
    "    train_path,\n",
    "    target_size=(224, 224),  # Adjusted target size to match model input shape\n",
    "    batch_size=32,\n",
    "    class_mode='categorical'\n",
    ")\n",
    "\n",
    "# Load testing data\n",
    "test_generator = test_datagen.flow_from_directory(\n",
    "    test_path,\n",
    "    target_size=(224, 224),  # Adjusted target size to match model input shape\n",
    "    batch_size=32,\n",
    "    class_mode='categorical'\n",
    ")\n",
    "\n",
    "# Load validation data\n",
    "valid_generator = valid_datagen.flow_from_directory(\n",
    "    valid_path,\n",
    "    target_size=(224, 224),  # Adjusted target size to match model input shape\n",
    "    batch_size=32,\n",
    "    class_mode='categorical'\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "32/32 [==============================] - ETA: 0s - batch: 15.5000 - size: 31.2500 - loss: 1.4569 - accuracy: 0.2530 "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Addmin\\AppData\\Roaming\\Python\\Python39\\site-packages\\keras\\engine\\training_v1.py:2335: UserWarning: `Model.state_updates` will be removed in a future version. This property should not be used in TensorFlow 2.0, as `updates` are applied automatically.\n",
      "  updates = self.state_updates\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32/32 [==============================] - 586s 17s/step - batch: 15.5000 - size: 31.2500 - loss: 1.4561 - accuracy: 0.2530 - val_loss: 1.3799 - val_accuracy: 0.1389\n",
      "Epoch 2/10\n",
      "32/32 [==============================] - 486s 15s/step - batch: 15.5000 - size: 31.2500 - loss: 1.3726 - accuracy: 0.2700 - val_loss: 1.3870 - val_accuracy: 0.2500\n",
      "Epoch 3/10\n",
      "32/32 [==============================] - 463s 14s/step - batch: 15.5000 - size: 31.2500 - loss: 1.3779 - accuracy: 0.2730 - val_loss: 1.3801 - val_accuracy: 0.2222\n",
      "Epoch 4/10\n",
      "32/32 [==============================] - 537s 17s/step - batch: 15.5000 - size: 31.2500 - loss: 1.3686 - accuracy: 0.2730 - val_loss: 1.3802 - val_accuracy: 0.2778\n",
      "Epoch 5/10\n",
      "32/32 [==============================] - 8205s 264s/step - batch: 15.5000 - size: 31.2500 - loss: 1.3584 - accuracy: 0.2890 - val_loss: 1.4163 - val_accuracy: 0.3056\n",
      "Epoch 6/10\n",
      "32/32 [==============================] - 595s 19s/step - batch: 15.5000 - size: 31.2500 - loss: 1.3604 - accuracy: 0.3290 - val_loss: 1.4169 - val_accuracy: 0.2778\n",
      "Epoch 7/10\n",
      "32/32 [==============================] - 625s 20s/step - batch: 15.5000 - size: 31.2500 - loss: 1.3411 - accuracy: 0.3330 - val_loss: 1.3426 - val_accuracy: 0.1944\n",
      "Epoch 8/10\n",
      "32/32 [==============================] - 721s 23s/step - batch: 15.5000 - size: 31.2500 - loss: 1.3375 - accuracy: 0.3230 - val_loss: 1.3808 - val_accuracy: 0.2500\n",
      "Epoch 9/10\n",
      "32/32 [==============================] - 724s 23s/step - batch: 15.5000 - size: 31.2500 - loss: 1.3792 - accuracy: 0.2860 - val_loss: 1.3860 - val_accuracy: 0.2222\n",
      "Epoch 10/10\n",
      "32/32 [==============================] - 611s 19s/step - batch: 15.5000 - size: 31.2500 - loss: 1.3504 - accuracy: 0.3040 - val_loss: 1.4081 - val_accuracy: 0.1944\n",
      "Test Accuracy: 0.21052632\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\n",
    "\n",
    "# Define the CNN model\n",
    "model = Sequential([\n",
    "    Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),\n",
    "    MaxPooling2D((2, 2)),\n",
    "    Conv2D(64, (3, 3), activation='relu'),\n",
    "    MaxPooling2D((2, 2)),\n",
    "    Conv2D(128, (3, 3), activation='relu'),\n",
    "    MaxPooling2D((2, 2)),\n",
    "    Flatten(),\n",
    "    Dense(128, activation='relu'),\n",
    "    Dropout(0.5),\n",
    "    Dense(4, activation='softmax')  # Adjusted output units to match the number of classes\n",
    "])\n",
    "\n",
    "# Compile the model\n",
    "model.compile(optimizer='adam',\n",
    "              loss='categorical_crossentropy',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_generator,\n",
    "    epochs=10,\n",
    "    validation_data=valid_generator\n",
    ")\n",
    "\n",
    "# Evaluate the model on the test data\n",
    "test_loss, test_acc = model.evaluate(test_generator)\n",
    "print(\"Test Accuracy:\", test_acc)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save the trained model\n",
    "model.save('animal_emotion_model.h5')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import filedialog, messagebox\n",
    "from PIL import Image, ImageTk\n",
    "import numpy as np\n",
    "import cv2\n",
    "from tensorflow.keras.models import load_model\n",
    "from tensorflow.keras.preprocessing.image import img_to_array\n",
    "\n",
    "# Load the trained model\n",
    "model = load_model('animal_emotion_model.h5')\n",
    "\n",
    "# Define animal and emotion labels\n",
    "animal_labels = ['dog', 'cat', 'bird', 'rat']\n",
    "emotion_labels = ['happy', 'sad', 'hungry', 'angry']\n",
    "\n",
    "# Function to preprocess image\n",
    "def preprocess_image(file_path):\n",
    "    image = cv2.imread(file_path)\n",
    "    image = cv2.resize(image, (224, 224))  # Resize image to match model input shape\n",
    "    image = img_to_array(image) / 255.0\n",
    "    return np.expand_dims(image, axis=0)\n",
    "\n",
    "# Function to make predictions for a single animal\n",
    "def predict_emotion(file_path):\n",
    "    image = preprocess_image(file_path)\n",
    "    prediction = model.predict(image)\n",
    "    max_index = np.argmax(prediction)\n",
    "    animal_label = animal_labels[max_index % len(animal_labels)]  # Adjusting to ensure proper label matching\n",
    "    emotion_label = emotion_labels[max_index % len(emotion_labels)]  # Adjusting to ensure proper label matching\n",
    "    return animal_label, emotion_label\n",
    "\n",
    "# Function to handle file selection for a single animal\n",
    "def select_file():\n",
    "    file_path = filedialog.askopenfilename()\n",
    "    if file_path:\n",
    "        # Display selected image in GUI\n",
    "        img = Image.open(file_path)\n",
    "        img = img.resize((300, 300), Image.Resampling.LANCZOS)\n",
    "        img = ImageTk.PhotoImage(img)\n",
    "        label_image.config(image=img)\n",
    "        label_image.image = img\n",
    "        # Predict animal category and emotion, and display result in GUI\n",
    "        animal_category, emotion = predict_emotion(file_path)\n",
    "        label_result.config(text=f\"Predicted Animal: {animal_category}\\nPredicted Emotion: {emotion}\")\n",
    "\n",
    "# Function to predict emotions for a group of animals\n",
    "def predict_emotions_for_group(file_paths):\n",
    "    emotions = []\n",
    "    for file_path in file_paths:\n",
    "        animal_label, emotion = predict_emotion(file_path)\n",
    "        emotions.append((animal_label, emotion))\n",
    "    return emotions\n",
    "\n",
    "# Function to handle file selection for a group of animals\n",
    "def select_files_for_group():\n",
    "    file_paths = filedialog.askopenfilenames()\n",
    "    if file_paths:\n",
    "        # Predict emotions for the group\n",
    "        emotions = predict_emotions_for_group(file_paths)\n",
    "        # Display popup notification with animal names and emotions\n",
    "        message = \"Animals and Emotions:\\n\"\n",
    "        for animal_label, emotion in emotions:\n",
    "            message += f\"{animal_label}: {emotion}\\n\"\n",
    "        messagebox.showinfo(\"Group Emotions\", message)\n",
    "\n",
    "# Create GUI window\n",
    "root = tk.Tk()\n",
    "root.title(\"Animal Emotion Detection\")\n",
    "\n",
    "# Create widgets\n",
    "button_select_single = tk.Button(root, text=\"Select Single Animal Image\", command=select_file)\n",
    "button_select_single.pack(pady=10)\n",
    "\n",
    "button_select_group = tk.Button(root, text=\"Select Group of Animal Images\", command=select_files_for_group)\n",
    "button_select_group.pack(pady=10)\n",
    "\n",
    "label_image = tk.Label(root)\n",
    "label_image.pack(pady=10)\n",
    "\n",
    "label_result = tk.Label(root, text=\"\")\n",
    "label_result.pack(pady=10)\n",
    "\n",
    "# Run GUI\n",
    "root.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
